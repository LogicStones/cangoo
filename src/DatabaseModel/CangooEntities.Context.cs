//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CangooEntities : DbContext
    {
        public CangooEntities()
            : base("name=CangooEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Agreement> Agreements { get; set; }
        public virtual DbSet<AgreementType> AgreementTypes { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<ApplicationSetting> ApplicationSettings { get; set; }
        public virtual DbSet<ApplicationUserType> ApplicationUserTypes { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Benificiary> Benificiaries { get; set; }
        public virtual DbSet<BenificiaryTransactionDetail> BenificiaryTransactionDetails { get; set; }
        public virtual DbSet<BookingMode> BookingModes { get; set; }
        public virtual DbSet<BookingType> BookingTypes { get; set; }
        public virtual DbSet<CancelReason> CancelReasons { get; set; }
        public virtual DbSet<Captain> Captains { get; set; }
        public virtual DbSet<CaptainPaymentsHistory> CaptainPaymentsHistories { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyCoWorker> CompanyCoWorkers { get; set; }
        public virtual DbSet<CompanyQuotaRechargeHistory> CompanyQuotaRechargeHistories { get; set; }
        public virtual DbSet<CompanyVoucher> CompanyVouchers { get; set; }
        public virtual DbSet<ContactDetail> ContactDetails { get; set; }
        public virtual DbSet<CouponsManager> CouponsManagers { get; set; }
        public virtual DbSet<CourierServicesDistrict> CourierServicesDistricts { get; set; }
        public virtual DbSet<CourierServiceZone> CourierServiceZones { get; set; }
        public virtual DbSet<CoworkerQuota> CoworkerQuotas { get; set; }
        public virtual DbSet<DispatchedRidesLog> DispatchedRidesLogs { get; set; }
        public virtual DbSet<Dispatcher> Dispatchers { get; set; }
        public virtual DbSet<DispatcherBooking> DispatcherBookings { get; set; }
        public virtual DbSet<DispatcherProfile> DispatcherProfiles { get; set; }
        public virtual DbSet<Facility> Facilities { get; set; }
        public virtual DbSet<FAQ> FAQs { get; set; }
        public virtual DbSet<FareManager> FareManagers { get; set; }
        public virtual DbSet<FareManagerLog> FareManagerLogs { get; set; }
        public virtual DbSet<FareManagerTimeRanx> FareManagerTimeRanges { get; set; }
        public virtual DbSet<FareRanx> FareRanges { get; set; }
        public virtual DbSet<Go4SystemLocations> Go4SystemLocations { get; set; }
        public virtual DbSet<KarhooQuote> KarhooQuotes { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LogCaptainOnlineVehicle> LogCaptainOnlineVehicles { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<PassengerPlace> PassengerPlaces { get; set; }
        public virtual DbSet<PaymentMode> PaymentModes { get; set; }
        public virtual DbSet<PaymentStatu> PaymentStatus { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<PlacesType> PlacesTypes { get; set; }
        public virtual DbSet<Popup> Popups { get; set; }
        public virtual DbSet<PriorityHourLog> PriorityHourLogs { get; set; }
        public virtual DbSet<PromoManager> PromoManagers { get; set; }
        public virtual DbSet<PublicHoliday> PublicHolidays { get; set; }
        public virtual DbSet<ReportsLog> ReportsLogs { get; set; }
        public virtual DbSet<ReroutedRidesLog> ReroutedRidesLogs { get; set; }
        public virtual DbSet<Reseller> Resellers { get; set; }
        public virtual DbSet<RewardPointsManager> RewardPointsManagers { get; set; }
        public virtual DbSet<RideServicesArea> RideServicesAreas { get; set; }
        public virtual DbSet<RideServicesAreaCategoryFare> RideServicesAreaCategoryFares { get; set; }
        public virtual DbSet<RideServicesDistanceRanx> RideServicesDistanceRanges { get; set; }
        public virtual DbSet<RideServicesFareManager> RideServicesFareManagers { get; set; }
        public virtual DbSet<RideServicesShift> RideServicesShifts { get; set; }
        public virtual DbSet<RideServicesTimeRanx> RideServicesTimeRanges { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<SharedRideBlockedUser> SharedRideBlockedUsers { get; set; }
        public virtual DbSet<SharedRideParticipant> SharedRideParticipants { get; set; }
        public virtual DbSet<SubscriptionHistory> SubscriptionHistories { get; set; }
        public virtual DbSet<SubscriptionPlan> SubscriptionPlans { get; set; }
        public virtual DbSet<SubscriptionType> SubscriptionTypes { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<TripRequestLog> TripRequestLogs { get; set; }
        public virtual DbSet<TripStatu> TripStatus { get; set; }
        public virtual DbSet<TrustedContact> TrustedContacts { get; set; }
        public virtual DbSet<UserFavoriteCaptain> UserFavoriteCaptains { get; set; }
        public virtual DbSet<UserPromo> UserPromos { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<VehicleCategory> VehicleCategories { get; set; }
        public virtual DbSet<VehicleMake> VehicleMakes { get; set; }
        public virtual DbSet<VehicleModel> VehicleModels { get; set; }
        public virtual DbSet<WalletTransfer> WalletTransfers { get; set; }
        public virtual DbSet<Trip> Trips { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<UserReadNotification> UserReadNotifications { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<UserInvite> UserInvites { get; set; }
    
        public virtual int AddApplication(Nullable<System.Guid> resellerID, Nullable<System.Guid> applicationID, string ownerName, string companyName, string logo, string originalLogo, string contractFile, string originalContractFile, string authorizedArea, Nullable<double> percentagePayable, Nullable<double> percentageReceiveable, Nullable<int> subscriptionPlanID, Nullable<System.DateTime> subscriptionDate, Nullable<System.DateTime> paymentDueDate, Nullable<int> subscriptionTypeID, Nullable<int> paymentModeID, Nullable<int> paymentTypeID, Nullable<int> paymentStatusID, string paypalAccountNumber, string address, string taxNumber, string subscribedModules, string paypalEmail, string paypalNationalNumber, string paypalCountryCode, string paypalPhoneExt, Nullable<System.Guid> transactionID, Nullable<System.DateTime> dateTime, Nullable<System.Guid> debitFrom, Nullable<System.Guid> creditTo, string reference, Nullable<decimal> amount)
        {
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("ResellerID", resellerID) :
                new ObjectParameter("ResellerID", typeof(System.Guid));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var originalLogoParameter = originalLogo != null ?
                new ObjectParameter("OriginalLogo", originalLogo) :
                new ObjectParameter("OriginalLogo", typeof(string));
    
            var contractFileParameter = contractFile != null ?
                new ObjectParameter("ContractFile", contractFile) :
                new ObjectParameter("ContractFile", typeof(string));
    
            var originalContractFileParameter = originalContractFile != null ?
                new ObjectParameter("OriginalContractFile", originalContractFile) :
                new ObjectParameter("OriginalContractFile", typeof(string));
    
            var authorizedAreaParameter = authorizedArea != null ?
                new ObjectParameter("AuthorizedArea", authorizedArea) :
                new ObjectParameter("AuthorizedArea", typeof(string));
    
            var percentagePayableParameter = percentagePayable.HasValue ?
                new ObjectParameter("PercentagePayable", percentagePayable) :
                new ObjectParameter("PercentagePayable", typeof(double));
    
            var percentageReceiveableParameter = percentageReceiveable.HasValue ?
                new ObjectParameter("PercentageReceiveable", percentageReceiveable) :
                new ObjectParameter("PercentageReceiveable", typeof(double));
    
            var subscriptionPlanIDParameter = subscriptionPlanID.HasValue ?
                new ObjectParameter("SubscriptionPlanID", subscriptionPlanID) :
                new ObjectParameter("SubscriptionPlanID", typeof(int));
    
            var subscriptionDateParameter = subscriptionDate.HasValue ?
                new ObjectParameter("SubscriptionDate", subscriptionDate) :
                new ObjectParameter("SubscriptionDate", typeof(System.DateTime));
    
            var paymentDueDateParameter = paymentDueDate.HasValue ?
                new ObjectParameter("PaymentDueDate", paymentDueDate) :
                new ObjectParameter("PaymentDueDate", typeof(System.DateTime));
    
            var subscriptionTypeIDParameter = subscriptionTypeID.HasValue ?
                new ObjectParameter("SubscriptionTypeID", subscriptionTypeID) :
                new ObjectParameter("SubscriptionTypeID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var paymentStatusIDParameter = paymentStatusID.HasValue ?
                new ObjectParameter("PaymentStatusID", paymentStatusID) :
                new ObjectParameter("PaymentStatusID", typeof(int));
    
            var paypalAccountNumberParameter = paypalAccountNumber != null ?
                new ObjectParameter("PaypalAccountNumber", paypalAccountNumber) :
                new ObjectParameter("PaypalAccountNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var subscribedModulesParameter = subscribedModules != null ?
                new ObjectParameter("SubscribedModules", subscribedModules) :
                new ObjectParameter("SubscribedModules", typeof(string));
    
            var paypalEmailParameter = paypalEmail != null ?
                new ObjectParameter("PaypalEmail", paypalEmail) :
                new ObjectParameter("PaypalEmail", typeof(string));
    
            var paypalNationalNumberParameter = paypalNationalNumber != null ?
                new ObjectParameter("PaypalNationalNumber", paypalNationalNumber) :
                new ObjectParameter("PaypalNationalNumber", typeof(string));
    
            var paypalCountryCodeParameter = paypalCountryCode != null ?
                new ObjectParameter("PaypalCountryCode", paypalCountryCode) :
                new ObjectParameter("PaypalCountryCode", typeof(string));
    
            var paypalPhoneExtParameter = paypalPhoneExt != null ?
                new ObjectParameter("PaypalPhoneExt", paypalPhoneExt) :
                new ObjectParameter("PaypalPhoneExt", typeof(string));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(System.Guid));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var debitFromParameter = debitFrom.HasValue ?
                new ObjectParameter("DebitFrom", debitFrom) :
                new ObjectParameter("DebitFrom", typeof(System.Guid));
    
            var creditToParameter = creditTo.HasValue ?
                new ObjectParameter("CreditTo", creditTo) :
                new ObjectParameter("CreditTo", typeof(System.Guid));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddApplication", resellerIDParameter, applicationIDParameter, ownerNameParameter, companyNameParameter, logoParameter, originalLogoParameter, contractFileParameter, originalContractFileParameter, authorizedAreaParameter, percentagePayableParameter, percentageReceiveableParameter, subscriptionPlanIDParameter, subscriptionDateParameter, paymentDueDateParameter, subscriptionTypeIDParameter, paymentModeIDParameter, paymentTypeIDParameter, paymentStatusIDParameter, paypalAccountNumberParameter, addressParameter, taxNumberParameter, subscribedModulesParameter, paypalEmailParameter, paypalNationalNumberParameter, paypalCountryCodeParameter, paypalPhoneExtParameter, transactionIDParameter, dateTimeParameter, debitFromParameter, creditToParameter, referenceParameter, amountParameter);
        }
    
        public virtual int AddCompanyWorker(Nullable<System.Guid> companyUserID, Nullable<System.Guid> companyID, Nullable<System.Guid> userID, Nullable<System.Guid> userProfileID, Nullable<System.Guid> applicationID, string firstName, string lastName, string phoneVerificationCode)
        {
            var companyUserIDParameter = companyUserID.HasValue ?
                new ObjectParameter("CompanyUserID", companyUserID) :
                new ObjectParameter("CompanyUserID", typeof(System.Guid));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(System.Guid));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var userProfileIDParameter = userProfileID.HasValue ?
                new ObjectParameter("UserProfileID", userProfileID) :
                new ObjectParameter("UserProfileID", typeof(System.Guid));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneVerificationCodeParameter = phoneVerificationCode != null ?
                new ObjectParameter("PhoneVerificationCode", phoneVerificationCode) :
                new ObjectParameter("PhoneVerificationCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCompanyWorker", companyUserIDParameter, companyIDParameter, userIDParameter, userProfileIDParameter, applicationIDParameter, firstNameParameter, lastNameParameter, phoneVerificationCodeParameter);
        }
    
        public virtual int AddReseller(Nullable<System.Guid> resellerID, string ownerName, string companyName, string logo, string originalLogo, string contractFile, string originalContractFile, string authorizedArea, Nullable<double> percentagePayable, Nullable<double> percentageReceiveable, Nullable<int> subscriptionPlanID, Nullable<System.DateTime> subscriptionDate, Nullable<System.DateTime> paymentDueDate, Nullable<int> subscriptionTypeID, Nullable<int> paymentModeID, Nullable<int> paymentTypeID, Nullable<int> paymentStatusID, string paypalAccountNumber, string address, string taxNumber, string subscribedModules, string paypalEmail, string paypalNationalNumber, string paypalCountryCode, string paypalPhoneExt, Nullable<System.Guid> transactionID, Nullable<System.DateTime> dateTime, Nullable<System.Guid> debitFrom, Nullable<System.Guid> creditTo, string reference, Nullable<decimal> amount)
        {
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("ResellerID", resellerID) :
                new ObjectParameter("ResellerID", typeof(System.Guid));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var originalLogoParameter = originalLogo != null ?
                new ObjectParameter("OriginalLogo", originalLogo) :
                new ObjectParameter("OriginalLogo", typeof(string));
    
            var contractFileParameter = contractFile != null ?
                new ObjectParameter("ContractFile", contractFile) :
                new ObjectParameter("ContractFile", typeof(string));
    
            var originalContractFileParameter = originalContractFile != null ?
                new ObjectParameter("OriginalContractFile", originalContractFile) :
                new ObjectParameter("OriginalContractFile", typeof(string));
    
            var authorizedAreaParameter = authorizedArea != null ?
                new ObjectParameter("AuthorizedArea", authorizedArea) :
                new ObjectParameter("AuthorizedArea", typeof(string));
    
            var percentagePayableParameter = percentagePayable.HasValue ?
                new ObjectParameter("PercentagePayable", percentagePayable) :
                new ObjectParameter("PercentagePayable", typeof(double));
    
            var percentageReceiveableParameter = percentageReceiveable.HasValue ?
                new ObjectParameter("PercentageReceiveable", percentageReceiveable) :
                new ObjectParameter("PercentageReceiveable", typeof(double));
    
            var subscriptionPlanIDParameter = subscriptionPlanID.HasValue ?
                new ObjectParameter("SubscriptionPlanID", subscriptionPlanID) :
                new ObjectParameter("SubscriptionPlanID", typeof(int));
    
            var subscriptionDateParameter = subscriptionDate.HasValue ?
                new ObjectParameter("SubscriptionDate", subscriptionDate) :
                new ObjectParameter("SubscriptionDate", typeof(System.DateTime));
    
            var paymentDueDateParameter = paymentDueDate.HasValue ?
                new ObjectParameter("PaymentDueDate", paymentDueDate) :
                new ObjectParameter("PaymentDueDate", typeof(System.DateTime));
    
            var subscriptionTypeIDParameter = subscriptionTypeID.HasValue ?
                new ObjectParameter("SubscriptionTypeID", subscriptionTypeID) :
                new ObjectParameter("SubscriptionTypeID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var paymentStatusIDParameter = paymentStatusID.HasValue ?
                new ObjectParameter("PaymentStatusID", paymentStatusID) :
                new ObjectParameter("PaymentStatusID", typeof(int));
    
            var paypalAccountNumberParameter = paypalAccountNumber != null ?
                new ObjectParameter("PaypalAccountNumber", paypalAccountNumber) :
                new ObjectParameter("PaypalAccountNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var subscribedModulesParameter = subscribedModules != null ?
                new ObjectParameter("SubscribedModules", subscribedModules) :
                new ObjectParameter("SubscribedModules", typeof(string));
    
            var paypalEmailParameter = paypalEmail != null ?
                new ObjectParameter("PaypalEmail", paypalEmail) :
                new ObjectParameter("PaypalEmail", typeof(string));
    
            var paypalNationalNumberParameter = paypalNationalNumber != null ?
                new ObjectParameter("PaypalNationalNumber", paypalNationalNumber) :
                new ObjectParameter("PaypalNationalNumber", typeof(string));
    
            var paypalCountryCodeParameter = paypalCountryCode != null ?
                new ObjectParameter("PaypalCountryCode", paypalCountryCode) :
                new ObjectParameter("PaypalCountryCode", typeof(string));
    
            var paypalPhoneExtParameter = paypalPhoneExt != null ?
                new ObjectParameter("PaypalPhoneExt", paypalPhoneExt) :
                new ObjectParameter("PaypalPhoneExt", typeof(string));
    
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(System.Guid));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var debitFromParameter = debitFrom.HasValue ?
                new ObjectParameter("DebitFrom", debitFrom) :
                new ObjectParameter("DebitFrom", typeof(System.Guid));
    
            var creditToParameter = creditTo.HasValue ?
                new ObjectParameter("CreditTo", creditTo) :
                new ObjectParameter("CreditTo", typeof(System.Guid));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddReseller", resellerIDParameter, ownerNameParameter, companyNameParameter, logoParameter, originalLogoParameter, contractFileParameter, originalContractFileParameter, authorizedAreaParameter, percentagePayableParameter, percentageReceiveableParameter, subscriptionPlanIDParameter, subscriptionDateParameter, paymentDueDateParameter, subscriptionTypeIDParameter, paymentModeIDParameter, paymentTypeIDParameter, paymentStatusIDParameter, paypalAccountNumberParameter, addressParameter, taxNumberParameter, subscribedModulesParameter, paypalEmailParameter, paypalNationalNumberParameter, paypalCountryCodeParameter, paypalPhoneExtParameter, transactionIDParameter, dateTimeParameter, debitFromParameter, creditToParameter, referenceParameter, amountParameter);
        }
    
        public virtual ObjectResult<string> AllocateQuotaToCoworker(Nullable<System.Guid> companyUserID, Nullable<System.Guid> quotaID, Nullable<decimal> voucherAmount, Nullable<System.DateTime> allocationDate)
        {
            var companyUserIDParameter = companyUserID.HasValue ?
                new ObjectParameter("companyUserID", companyUserID) :
                new ObjectParameter("companyUserID", typeof(System.Guid));
    
            var quotaIDParameter = quotaID.HasValue ?
                new ObjectParameter("QuotaID", quotaID) :
                new ObjectParameter("QuotaID", typeof(System.Guid));
    
            var voucherAmountParameter = voucherAmount.HasValue ?
                new ObjectParameter("voucherAmount", voucherAmount) :
                new ObjectParameter("voucherAmount", typeof(decimal));
    
            var allocationDateParameter = allocationDate.HasValue ?
                new ObjectParameter("AllocationDate", allocationDate) :
                new ObjectParameter("AllocationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AllocateQuotaToCoworker", companyUserIDParameter, quotaIDParameter, voucherAmountParameter, allocationDateParameter);
        }
    
        public virtual int CreateResllerUser(string id, string email, Nullable<bool> emailConfirmed, string passwordHash, string securityStamp, string phoneNumber, Nullable<bool> phoneNumberConfirmed, Nullable<bool> twoFactorEnabled, Nullable<System.DateTime> lockoutEndDateUtc, Nullable<bool> lockoutEnabled, Nullable<int> accessFailedCount, string userName, string roleID)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var emailConfirmedParameter = emailConfirmed.HasValue ?
                new ObjectParameter("EmailConfirmed", emailConfirmed) :
                new ObjectParameter("EmailConfirmed", typeof(bool));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var securityStampParameter = securityStamp != null ?
                new ObjectParameter("SecurityStamp", securityStamp) :
                new ObjectParameter("SecurityStamp", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var phoneNumberConfirmedParameter = phoneNumberConfirmed.HasValue ?
                new ObjectParameter("PhoneNumberConfirmed", phoneNumberConfirmed) :
                new ObjectParameter("PhoneNumberConfirmed", typeof(bool));
    
            var twoFactorEnabledParameter = twoFactorEnabled.HasValue ?
                new ObjectParameter("TwoFactorEnabled", twoFactorEnabled) :
                new ObjectParameter("TwoFactorEnabled", typeof(bool));
    
            var lockoutEndDateUtcParameter = lockoutEndDateUtc.HasValue ?
                new ObjectParameter("LockoutEndDateUtc", lockoutEndDateUtc) :
                new ObjectParameter("LockoutEndDateUtc", typeof(System.DateTime));
    
            var lockoutEnabledParameter = lockoutEnabled.HasValue ?
                new ObjectParameter("LockoutEnabled", lockoutEnabled) :
                new ObjectParameter("LockoutEnabled", typeof(bool));
    
            var accessFailedCountParameter = accessFailedCount.HasValue ?
                new ObjectParameter("AccessFailedCount", accessFailedCount) :
                new ObjectParameter("AccessFailedCount", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateResllerUser", idParameter, emailParameter, emailConfirmedParameter, passwordHashParameter, securityStampParameter, phoneNumberParameter, phoneNumberConfirmedParameter, twoFactorEnabledParameter, lockoutEndDateUtcParameter, lockoutEnabledParameter, accessFailedCountParameter, userNameParameter, roleIDParameter);
        }
    
        public virtual ObjectResult<FetchAdminAnnualEarningAndProfit_Result> FetchAdminAnnualEarningAndProfit(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAdminAnnualEarningAndProfit_Result>("FetchAdminAnnualEarningAndProfit", dateParameter);
        }
    
        public virtual ObjectResult<FetchAdminDashboardData_Result> FetchAdminDashboardData(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAdminDashboardData_Result>("FetchAdminDashboardData", dateParameter);
        }
    
        public virtual ObjectResult<FetchAdminTransactionsHistory_Result> FetchAdminTransactionsHistory(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> superAdminId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var superAdminIdParameter = superAdminId.HasValue ?
                new ObjectParameter("superAdminId", superAdminId) :
                new ObjectParameter("superAdminId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAdminTransactionsHistory_Result>("FetchAdminTransactionsHistory", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, superAdminIdParameter);
        }
    
        public virtual ObjectResult<FetchApplicationAnnualEarningAndProfit_Result> FetchApplicationAnnualEarningAndProfit(Nullable<System.DateTime> date, Nullable<System.Guid> resellerID, Nullable<System.Guid> applicationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(System.Guid));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchApplicationAnnualEarningAndProfit_Result>("FetchApplicationAnnualEarningAndProfit", dateParameter, resellerIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchApplicationCaptains_Result> FetchApplicationCaptains(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationId, Nullable<System.DateTime> currentMonth)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("applicationId", applicationId) :
                new ObjectParameter("applicationId", typeof(System.Guid));
    
            var currentMonthParameter = currentMonth.HasValue ?
                new ObjectParameter("currentMonth", currentMonth) :
                new ObjectParameter("currentMonth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchApplicationCaptains_Result>("FetchApplicationCaptains", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIdParameter, currentMonthParameter);
        }
    
        public virtual ObjectResult<FetchApplicationDashboardData_Result> FetchApplicationDashboardData(Nullable<System.DateTime> date, Nullable<System.Guid> resellerID, Nullable<System.Guid> applicationID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(System.Guid));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchApplicationDashboardData_Result>("FetchApplicationDashboardData", dateParameter, resellerIDParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchApplicationDashboardTransactions_Result> FetchApplicationDashboardTransactions(Nullable<System.Guid> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchApplicationDashboardTransactions_Result>("FetchApplicationDashboardTransactions", applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchApplicationTransactionsHistory_Result> FetchApplicationTransactionsHistory(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchApplicationTransactionsHistory_Result>("FetchApplicationTransactionsHistory", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchApplicationUsers_Result> FetchApplicationUsers(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchApplicationUsers_Result>("FetchApplicationUsers", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchApplicationVehicles_Result> FetchApplicationVehicles(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("applicationId", applicationId) :
                new ObjectParameter("applicationId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchApplicationVehicles_Result>("FetchApplicationVehicles", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIdParameter);
        }
    
        public virtual ObjectResult<FetchBeneficiaryReceivedFundsTransactions_Result> FetchBeneficiaryReceivedFundsTransactions(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> userId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchBeneficiaryReceivedFundsTransactions_Result>("FetchBeneficiaryReceivedFundsTransactions", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, userIdParameter);
        }
    
        public virtual ObjectResult<FetchBeneficiaryTransactions_Result> FetchBeneficiaryTransactions(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> userId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchBeneficiaryTransactions_Result>("FetchBeneficiaryTransactions", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, userIdParameter);
        }
    
        public virtual ObjectResult<FetchBenificiaries_Result> FetchBenificiaries(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> userId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchBenificiaries_Result>("FetchBenificiaries", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, userIdParameter);
        }
    
        public virtual ObjectResult<FetchBenificiaryTripHistory_Result> FetchBenificiaryTripHistory(Nullable<System.Guid> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchBenificiaryTripHistory_Result>("FetchBenificiaryTripHistory", userIdParameter);
        }
    
        public virtual ObjectResult<FetchBlockedUsers_Result> FetchBlockedUsers(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> userID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchBlockedUsers_Result>("FetchBlockedUsers", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, userIDParameter);
        }
    
        public virtual ObjectResult<FetchBusinessAdminDashboardData_Result> FetchBusinessAdminDashboardData(Nullable<System.DateTime> date, Nullable<System.Guid> resellerID, Nullable<System.Guid> applicationID, Nullable<System.Guid> companyID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(System.Guid));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchBusinessAdminDashboardData_Result>("FetchBusinessAdminDashboardData", dateParameter, resellerIDParameter, applicationIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<FetchBusinessAdminDashboardTransactions_Result> FetchBusinessAdminDashboardTransactions(Nullable<System.Guid> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchBusinessAdminDashboardTransactions_Result>("FetchBusinessAdminDashboardTransactions", companyIDParameter);
        }
    
        public virtual ObjectResult<FetchCaptainAnnualEarningAndRides_Result> FetchCaptainAnnualEarningAndRides(Nullable<System.DateTime> date, Nullable<System.Guid> resellerID, Nullable<System.Guid> applicationID, Nullable<System.Guid> fleetID, Nullable<System.Guid> captainID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(System.Guid));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            var fleetIDParameter = fleetID.HasValue ?
                new ObjectParameter("fleetID", fleetID) :
                new ObjectParameter("fleetID", typeof(System.Guid));
    
            var captainIDParameter = captainID.HasValue ?
                new ObjectParameter("captainID", captainID) :
                new ObjectParameter("captainID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCaptainAnnualEarningAndRides_Result>("FetchCaptainAnnualEarningAndRides", dateParameter, resellerIDParameter, applicationIDParameter, fleetIDParameter, captainIDParameter);
        }
    
        public virtual ObjectResult<FetchCaptainDashboardData_Result> FetchCaptainDashboardData(Nullable<System.DateTime> date, Nullable<System.Guid> resellerID, Nullable<System.Guid> applicationID, Nullable<System.Guid> companyID, Nullable<System.Guid> captainID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(System.Guid));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(System.Guid));
    
            var captainIDParameter = captainID.HasValue ?
                new ObjectParameter("captainID", captainID) :
                new ObjectParameter("captainID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCaptainDashboardData_Result>("FetchCaptainDashboardData", dateParameter, resellerIDParameter, applicationIDParameter, companyIDParameter, captainIDParameter);
        }
    
        public virtual ObjectResult<FetchCaptainDashboardTripHistory_Result> FetchCaptainDashboardTripHistory(Nullable<System.Guid> captainID)
        {
            var captainIDParameter = captainID.HasValue ?
                new ObjectParameter("captainID", captainID) :
                new ObjectParameter("captainID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCaptainDashboardTripHistory_Result>("FetchCaptainDashboardTripHistory", captainIDParameter);
        }
    
        public virtual ObjectResult<FetchCaptainFeedbackForDashboard_Result> FetchCaptainFeedbackForDashboard(Nullable<System.Guid> captainID)
        {
            var captainIDParameter = captainID.HasValue ?
                new ObjectParameter("captainID", captainID) :
                new ObjectParameter("captainID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCaptainFeedbackForDashboard_Result>("FetchCaptainFeedbackForDashboard", captainIDParameter);
        }
    
        public virtual ObjectResult<FetchCaptainFeedbackHistory_Result> FetchCaptainFeedbackHistory(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> captainId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var captainIdParameter = captainId.HasValue ?
                new ObjectParameter("captainId", captainId) :
                new ObjectParameter("captainId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCaptainFeedbackHistory_Result>("FetchCaptainFeedbackHistory", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, captainIdParameter);
        }
    
        public virtual ObjectResult<FetchCaptainHistoryForBusinessAdminDashboard_Result> FetchCaptainHistoryForBusinessAdminDashboard(Nullable<System.Guid> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCaptainHistoryForBusinessAdminDashboard_Result>("FetchCaptainHistoryForBusinessAdminDashboard", companyIDParameter);
        }
    
        public virtual ObjectResult<FetchCaptainLastPaymentDetails_Result> FetchCaptainLastPaymentDetails(Nullable<System.Guid> captainID)
        {
            var captainIDParameter = captainID.HasValue ?
                new ObjectParameter("captainID", captainID) :
                new ObjectParameter("captainID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCaptainLastPaymentDetails_Result>("FetchCaptainLastPaymentDetails", captainIDParameter);
        }
    
        public virtual ObjectResult<FetchCaptainPaymentHistory_Result> FetchCaptainPaymentHistory(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> captainID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var captainIDParameter = captainID.HasValue ?
                new ObjectParameter("captainID", captainID) :
                new ObjectParameter("captainID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCaptainPaymentHistory_Result>("FetchCaptainPaymentHistory", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, captainIDParameter);
        }
    
        public virtual ObjectResult<FetchCaptainProfile_Result> FetchCaptainProfile(Nullable<System.Guid> captainID)
        {
            var captainIDParameter = captainID.HasValue ?
                new ObjectParameter("captainID", captainID) :
                new ObjectParameter("captainID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCaptainProfile_Result>("FetchCaptainProfile", captainIDParameter);
        }
    
        public virtual ObjectResult<FetchCaptains_Result> FetchCaptains(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> companyId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCaptains_Result>("FetchCaptains", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<FetchCaptainTripsHistory_Result> FetchCaptainTripsHistory(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string search, Nullable<System.Guid> captainId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var captainIdParameter = captainId.HasValue ?
                new ObjectParameter("CaptainId", captainId) :
                new ObjectParameter("CaptainId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCaptainTripsHistory_Result>("FetchCaptainTripsHistory", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, fromDateParameter, toDateParameter, searchParameter, captainIdParameter);
        }
    
        public virtual ObjectResult<FetchCompanies_Result> FetchCompanies(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<System.DateTime> subscribedDate, Nullable<System.DateTime> expiryDate, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var subscribedDateParameter = subscribedDate.HasValue ?
                new ObjectParameter("SubscribedDate", subscribedDate) :
                new ObjectParameter("SubscribedDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCompanies_Result>("FetchCompanies", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, subscribedDateParameter, expiryDateParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchCompanyBookedRides_Result> FetchCompanyBookedRides(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> companyId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCompanyBookedRides_Result>("FetchCompanyBookedRides", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<FetchCompanyDetailsToAllocateQuota_Result> FetchCompanyDetailsToAllocateQuota(Nullable<System.Guid> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCompanyDetailsToAllocateQuota_Result>("FetchCompanyDetailsToAllocateQuota", companyIDParameter);
        }
    
        public virtual ObjectResult<FetchCompanyPayment_Result> FetchCompanyPayment(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> resellerId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var resellerIdParameter = resellerId.HasValue ?
                new ObjectParameter("ResellerId", resellerId) :
                new ObjectParameter("ResellerId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCompanyPayment_Result>("FetchCompanyPayment", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, resellerIdParameter);
        }
    
        public virtual ObjectResult<FetchCompanyRechargeHistory_Result> FetchCompanyRechargeHistory(Nullable<System.Guid> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCompanyRechargeHistory_Result>("FetchCompanyRechargeHistory", companyIDParameter);
        }
    
        public virtual ObjectResult<FetchCompanyTripHistory_Result> FetchCompanyTripHistory(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> companyId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCompanyTripHistory_Result>("FetchCompanyTripHistory", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<FetchCompanyTripHistoryByCaptain_Result> FetchCompanyTripHistoryByCaptain(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> companyId, Nullable<System.Guid> captainId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var captainIdParameter = captainId.HasValue ?
                new ObjectParameter("CaptainId", captainId) :
                new ObjectParameter("CaptainId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCompanyTripHistoryByCaptain_Result>("FetchCompanyTripHistoryByCaptain", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, companyIdParameter, captainIdParameter);
        }
    
        public virtual ObjectResult<FetchCompanyTripHistoryByVehicle_Result> FetchCompanyTripHistoryByVehicle(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> companyId, Nullable<System.Guid> vehicleId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(System.Guid));
    
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCompanyTripHistoryByVehicle_Result>("FetchCompanyTripHistoryByVehicle", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, companyIdParameter, vehicleIdParameter);
        }
    
        public virtual ObjectResult<FetchCompanyWorkers_Result> FetchCompanyWorkers(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> companyId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCompanyWorkers_Result>("FetchCompanyWorkers", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<FetchCoworkerByID_Result> FetchCoworkerByID(Nullable<System.Guid> workerID)
        {
            var workerIDParameter = workerID.HasValue ?
                new ObjectParameter("workerID", workerID) :
                new ObjectParameter("workerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCoworkerByID_Result>("FetchCoworkerByID", workerIDParameter);
        }
    
        public virtual ObjectResult<FetchCoworkerForDashboard_Result> FetchCoworkerForDashboard(Nullable<System.Guid> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCoworkerForDashboard_Result>("FetchCoworkerForDashboard", companyIDParameter);
        }
    
        public virtual ObjectResult<FetchCoWorkerQuotaRechargeHistory_Result> FetchCoWorkerQuotaRechargeHistory(Nullable<System.Guid> coWorkerID)
        {
            var coWorkerIDParameter = coWorkerID.HasValue ?
                new ObjectParameter("CoWorkerID", coWorkerID) :
                new ObjectParameter("CoWorkerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCoWorkerQuotaRechargeHistory_Result>("FetchCoWorkerQuotaRechargeHistory", coWorkerIDParameter);
        }
    
        public virtual ObjectResult<FetchDashboardTransactions_Result> FetchDashboardTransactions(Nullable<System.Guid> superAdminId)
        {
            var superAdminIdParameter = superAdminId.HasValue ?
                new ObjectParameter("superAdminId", superAdminId) :
                new ObjectParameter("superAdminId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchDashboardTransactions_Result>("FetchDashboardTransactions", superAdminIdParameter);
        }
    
        public virtual ObjectResult<FetchDispatchers_Result> FetchDispatchers(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchDispatchers_Result>("FetchDispatchers", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchFacilities_Result> FetchFacilities(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFacilities_Result>("FetchFacilities", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchFAQs_Result> FetchFAQs(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFAQs_Result>("FetchFAQs", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchFares_Result> FetchFares(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFares_Result>("FetchFares", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchFavoriteCaptainForDashboard_Result> FetchFavoriteCaptainForDashboard(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFavoriteCaptainForDashboard_Result>("FetchFavoriteCaptainForDashboard", userIDParameter);
        }
    
        public virtual ObjectResult<FetchFavoriteCaptains_Result> FetchFavoriteCaptains(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, string userId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFavoriteCaptains_Result>("FetchFavoriteCaptains", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, userIdParameter);
        }
    
        public virtual ObjectResult<FetchFavoriteUsers_Result> FetchFavoriteUsers(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> captainID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var captainIDParameter = captainID.HasValue ?
                new ObjectParameter("captainID", captainID) :
                new ObjectParameter("captainID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFavoriteUsers_Result>("FetchFavoriteUsers", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, captainIDParameter);
        }
    
        public virtual ObjectResult<FetchFavoriteUsersForDashboard_Result> FetchFavoriteUsersForDashboard(Nullable<System.Guid> captainID)
        {
            var captainIDParameter = captainID.HasValue ?
                new ObjectParameter("captainID", captainID) :
                new ObjectParameter("captainID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFavoriteUsersForDashboard_Result>("FetchFavoriteUsersForDashboard", captainIDParameter);
        }
    
        public virtual ObjectResult<FetchFleetAnnualEarningAndPayable_Result> FetchFleetAnnualEarningAndPayable(Nullable<System.DateTime> date, Nullable<System.Guid> resellerID, Nullable<System.Guid> applicationID, Nullable<System.Guid> companyID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(System.Guid));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFleetAnnualEarningAndPayable_Result>("FetchFleetAnnualEarningAndPayable", dateParameter, resellerIDParameter, applicationIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<FetchFleetPayment_Result> FetchFleetPayment(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFleetPayment_Result>("FetchFleetPayment", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchFleets_Result> FetchFleets(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<System.DateTime> subscribedDate, Nullable<System.DateTime> expiryDate, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var subscribedDateParameter = subscribedDate.HasValue ?
                new ObjectParameter("SubscribedDate", subscribedDate) :
                new ObjectParameter("SubscribedDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFleets_Result>("FetchFleets", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, subscribedDateParameter, expiryDateParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchFleetTransactionsHistory_Result> FetchFleetTransactionsHistory(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> companyID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchFleetTransactionsHistory_Result>("FetchFleetTransactionsHistory", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<FetchGo4SystemLocations_Result> FetchGo4SystemLocations(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchGo4SystemLocations_Result>("FetchGo4SystemLocations", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchHotelBookedRides_Result> FetchHotelBookedRides(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> hotelId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var hotelIdParameter = hotelId.HasValue ?
                new ObjectParameter("HotelId", hotelId) :
                new ObjectParameter("HotelId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchHotelBookedRides_Result>("FetchHotelBookedRides", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, hotelIdParameter);
        }
    
        public virtual ObjectResult<FetchHotelBookingsForDashboard_Result> FetchHotelBookingsForDashboard(Nullable<System.Guid> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchHotelBookingsForDashboard_Result>("FetchHotelBookingsForDashboard", companyIDParameter);
        }
    
        public virtual ObjectResult<FetchHotels_Result> FetchHotels(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<System.DateTime> subscribedDate, Nullable<System.DateTime> expiryDate, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var subscribedDateParameter = subscribedDate.HasValue ?
                new ObjectParameter("SubscribedDate", subscribedDate) :
                new ObjectParameter("SubscribedDate", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchHotels_Result>("FetchHotels", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, subscribedDateParameter, expiryDateParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchHotelTripHistory_Result> FetchHotelTripHistory(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> hotelId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var hotelIdParameter = hotelId.HasValue ?
                new ObjectParameter("HotelId", hotelId) :
                new ObjectParameter("HotelId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchHotelTripHistory_Result>("FetchHotelTripHistory", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, hotelIdParameter);
        }
    
        public virtual ObjectResult<FetchHotelTripHistoryByCaptain_Result> FetchHotelTripHistoryByCaptain(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> hotelId, Nullable<System.Guid> captainId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var hotelIdParameter = hotelId.HasValue ?
                new ObjectParameter("HotelId", hotelId) :
                new ObjectParameter("HotelId", typeof(System.Guid));
    
            var captainIdParameter = captainId.HasValue ?
                new ObjectParameter("CaptainId", captainId) :
                new ObjectParameter("CaptainId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchHotelTripHistoryByCaptain_Result>("FetchHotelTripHistoryByCaptain", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, hotelIdParameter, captainIdParameter);
        }
    
        public virtual ObjectResult<FetchHotelTripHistoryByVehicle_Result> FetchHotelTripHistoryByVehicle(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> hotelId, Nullable<System.Guid> vehicleId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var hotelIdParameter = hotelId.HasValue ?
                new ObjectParameter("HotelId", hotelId) :
                new ObjectParameter("HotelId", typeof(System.Guid));
    
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchHotelTripHistoryByVehicle_Result>("FetchHotelTripHistoryByVehicle", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, hotelIdParameter, vehicleIdParameter);
        }
    
        public virtual ObjectResult<FetchNewsFeed_Result> FetchNewsFeed(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchNewsFeed_Result>("FetchNewsFeed", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchPassengerAnnualSpendingAndRides_Result> FetchPassengerAnnualSpendingAndRides(Nullable<System.DateTime> date, Nullable<System.Guid> resellerID, Nullable<System.Guid> applicationID, Nullable<System.Guid> userID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(System.Guid));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPassengerAnnualSpendingAndRides_Result>("FetchPassengerAnnualSpendingAndRides", dateParameter, resellerIDParameter, applicationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<FetchPassengerDashboardData_Result> FetchPassengerDashboardData(Nullable<System.DateTime> date, Nullable<System.Guid> resellerID, Nullable<System.Guid> applicationID, Nullable<System.Guid> userID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(System.Guid));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPassengerDashboardData_Result>("FetchPassengerDashboardData", dateParameter, resellerIDParameter, applicationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<FetchPayments_Result> FetchPayments(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string searchAll, string searchSent, string searchReceived, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchAllParameter = searchAll != null ?
                new ObjectParameter("searchAll", searchAll) :
                new ObjectParameter("searchAll", typeof(string));
    
            var searchSentParameter = searchSent != null ?
                new ObjectParameter("searchSent", searchSent) :
                new ObjectParameter("searchSent", typeof(string));
    
            var searchReceivedParameter = searchReceived != null ?
                new ObjectParameter("searchReceived", searchReceived) :
                new ObjectParameter("searchReceived", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPayments_Result>("FetchPayments", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchAllParameter, searchSentParameter, searchReceivedParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchPaymentUsers_Result> FetchPaymentUsers(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPaymentUsers_Result>("FetchPaymentUsers", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchPromoCodes_Result> FetchPromoCodes(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPromoCodes_Result>("FetchPromoCodes", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchResellerAnnualEarningAndProfit_Result> FetchResellerAnnualEarningAndProfit(Nullable<System.DateTime> date, Nullable<System.Guid> resellerID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchResellerAnnualEarningAndProfit_Result>("FetchResellerAnnualEarningAndProfit", dateParameter, resellerIDParameter);
        }
    
        public virtual ObjectResult<FetchResellerDashboardData_Result> FetchResellerDashboardData(Nullable<System.DateTime> date, Nullable<System.Guid> resellerID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchResellerDashboardData_Result>("FetchResellerDashboardData", dateParameter, resellerIDParameter);
        }
    
        public virtual ObjectResult<FetchResellerTransactionsHistory_Result> FetchResellerTransactionsHistory(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> resellerID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchResellerTransactionsHistory_Result>("FetchResellerTransactionsHistory", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, resellerIDParameter);
        }
    
        public virtual ObjectResult<FetchSharedRidesHistory_Result> FetchSharedRidesHistory(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> userID, Nullable<System.DateTime> currentDate)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchSharedRidesHistory_Result>("FetchSharedRidesHistory", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, userIDParameter, currentDateParameter);
        }
    
        public virtual ObjectResult<FetchSpecialPromoCodes_Result> FetchSpecialPromoCodes(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("applicationId", applicationId) :
                new ObjectParameter("applicationId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchSpecialPromoCodes_Result>("FetchSpecialPromoCodes", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIdParameter);
        }
    
        public virtual ObjectResult<FetchTransactionDetail_Result> FetchTransactionDetail(Nullable<System.Guid> transactionID)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchTransactionDetail_Result>("FetchTransactionDetail", transactionIDParameter);
        }
    
        public virtual ObjectResult<FetchTripDetail_Result> FetchTripDetail(Nullable<System.Guid> tripID)
        {
            var tripIDParameter = tripID.HasValue ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchTripDetail_Result>("FetchTripDetail", tripIDParameter);
        }
    
        public virtual ObjectResult<FetchTripParticipants_Result> FetchTripParticipants(Nullable<System.Guid> tripID)
        {
            var tripIDParameter = tripID.HasValue ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchTripParticipants_Result>("FetchTripParticipants", tripIDParameter);
        }
    
        public virtual ObjectResult<FetchTripsForAdmin_Result> FetchTripsForAdmin(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string search)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchTripsForAdmin_Result>("FetchTripsForAdmin", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, fromDateParameter, toDateParameter, searchParameter);
        }
    
        public virtual ObjectResult<FetchTripsForApplication_Result> FetchTripsForApplication(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string search, string applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID != null ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchTripsForApplication_Result>("FetchTripsForApplication", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, fromDateParameter, toDateParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchTripsForReseller_Result> FetchTripsForReseller(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string search, string resellerID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var resellerIDParameter = resellerID != null ?
                new ObjectParameter("ResellerID", resellerID) :
                new ObjectParameter("ResellerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchTripsForReseller_Result>("FetchTripsForReseller", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, fromDateParameter, toDateParameter, searchParameter, resellerIDParameter);
        }
    
        public virtual ObjectResult<FetchUpComingSharedRides_Result> FetchUpComingSharedRides(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> userID, Nullable<System.DateTime> currentDate)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("currentDate", currentDate) :
                new ObjectParameter("currentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchUpComingSharedRides_Result>("FetchUpComingSharedRides", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, userIDParameter, currentDateParameter);
        }
    
        public virtual ObjectResult<FetchUserByID_Result> FetchUserByID(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchUserByID_Result>("FetchUserByID", userIDParameter);
        }
    
        public virtual ObjectResult<FetchUserByUserName_Result> FetchUserByUserName(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchUserByUserName_Result>("FetchUserByUserName", userNameParameter);
        }
    
        public virtual ObjectResult<FetchUserDetail_Result> FetchUserDetail(Nullable<System.Guid> userProfileID)
        {
            var userProfileIDParameter = userProfileID.HasValue ?
                new ObjectParameter("userProfileID", userProfileID) :
                new ObjectParameter("userProfileID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchUserDetail_Result>("FetchUserDetail", userProfileIDParameter);
        }
    
        public virtual ObjectResult<FetchUserFeedbackForDashboard_Result> FetchUserFeedbackForDashboard(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchUserFeedbackForDashboard_Result>("FetchUserFeedbackForDashboard", userIDParameter);
        }
    
        public virtual ObjectResult<FetchUserFeedbackHistory_Result> FetchUserFeedbackHistory(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> userID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchUserFeedbackHistory_Result>("FetchUserFeedbackHistory", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, userIDParameter);
        }
    
        public virtual ObjectResult<FetchUserProfileInfo_Result> FetchUserProfileInfo(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchUserProfileInfo_Result>("FetchUserProfileInfo", userIdParameter);
        }
    
        public virtual ObjectResult<FetchUserToAssignVoucher_Result> FetchUserToAssignVoucher(Nullable<System.Guid> workerID)
        {
            var workerIDParameter = workerID.HasValue ?
                new ObjectParameter("workerID", workerID) :
                new ObjectParameter("workerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchUserToAssignVoucher_Result>("FetchUserToAssignVoucher", workerIDParameter);
        }
    
        public virtual ObjectResult<FetchUserTripHistory_Result> FetchUserTripHistory(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, string userID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchUserTripHistory_Result>("FetchUserTripHistory", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, userIDParameter);
        }
    
        public virtual ObjectResult<FetchUserTripHistoryDashboard_Result> FetchUserTripHistoryDashboard(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchUserTripHistoryDashboard_Result>("FetchUserTripHistoryDashboard", userIdParameter);
        }
    
        public virtual ObjectResult<FetchUserTrips_Result> FetchUserTrips(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchUserTrips_Result>("FetchUserTrips", userIDParameter);
        }
    
        public virtual ObjectResult<FetchVehicleCategories_Result> FetchVehicleCategories(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchVehicleCategories_Result>("FetchVehicleCategories", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchVehicleHistoryForBusinessAdminDashboard_Result> FetchVehicleHistoryForBusinessAdminDashboard(Nullable<System.Guid> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchVehicleHistoryForBusinessAdminDashboard_Result>("FetchVehicleHistoryForBusinessAdminDashboard", companyIDParameter);
        }
    
        public virtual ObjectResult<FetchVehicleMake_Result> FetchVehicleMake(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchVehicleMake_Result>("FetchVehicleMake", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchVehicleModel_Result> FetchVehicleModel(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchVehicleModel_Result>("FetchVehicleModel", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchVehicles_Result> FetchVehicles(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> companyId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("companyId", companyId) :
                new ObjectParameter("companyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchVehicles_Result>("FetchVehicles", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, companyIdParameter);
        }
    
        public virtual ObjectResult<FetchVehicleTripsHistory_Result> FetchVehicleTripsHistory(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string search, Nullable<System.Guid> vehicleId)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var vehicleIdParameter = vehicleId.HasValue ?
                new ObjectParameter("VehicleId", vehicleId) :
                new ObjectParameter("VehicleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchVehicleTripsHistory_Result>("FetchVehicleTripsHistory", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, fromDateParameter, toDateParameter, searchParameter, vehicleIdParameter);
        }
    
        public virtual ObjectResult<FetcUserRechargeHistory_Result> FetcUserRechargeHistory(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetcUserRechargeHistory_Result>("FetcUserRechargeHistory", userIDParameter);
        }
    
        public virtual ObjectResult<GetTripRequestLogDetails_Result> GetTripRequestLogDetails(Nullable<System.Guid> tripID)
        {
            var tripIDParameter = tripID.HasValue ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTripRequestLogDetails_Result>("GetTripRequestLogDetails", tripIDParameter);
        }
    
        public virtual int PhoneVerication(string phone, string role)
        {
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PhoneVerication", phoneParameter, roleParameter);
        }
    
        public virtual ObjectResult<rpt_GetTripsOverviewInDateRange_Result> rpt_GetTripsOverviewInDateRange(Nullable<System.DateTime> datetimeFrom, Nullable<System.DateTime> datetimeTo)
        {
            var datetimeFromParameter = datetimeFrom.HasValue ?
                new ObjectParameter("datetimeFrom", datetimeFrom) :
                new ObjectParameter("datetimeFrom", typeof(System.DateTime));
    
            var datetimeToParameter = datetimeTo.HasValue ?
                new ObjectParameter("datetimeTo", datetimeTo) :
                new ObjectParameter("datetimeTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rpt_GetTripsOverviewInDateRange_Result>("rpt_GetTripsOverviewInDateRange", datetimeFromParameter, datetimeToParameter);
        }
    
        public virtual ObjectResult<spCaptainLaterTrips_Result> spCaptainLaterTrips(Nullable<System.DateTime> currentDateTime, string captainID, Nullable<int> tripStatusID, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var currentDateTimeParameter = currentDateTime.HasValue ?
                new ObjectParameter("currentDateTime", currentDateTime) :
                new ObjectParameter("currentDateTime", typeof(System.DateTime));
    
            var captainIDParameter = captainID != null ?
                new ObjectParameter("CaptainID", captainID) :
                new ObjectParameter("CaptainID", typeof(string));
    
            var tripStatusIDParameter = tripStatusID.HasValue ?
                new ObjectParameter("tripStatusID", tripStatusID) :
                new ObjectParameter("tripStatusID", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCaptainLaterTrips_Result>("spCaptainLaterTrips", currentDateTimeParameter, captainIDParameter, tripStatusIDParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<spCaptainProfile_Result> spCaptainProfile(string captainID, string vehicleID, Nullable<System.DateTime> currentMonth)
        {
            var captainIDParameter = captainID != null ?
                new ObjectParameter("captainID", captainID) :
                new ObjectParameter("captainID", typeof(string));
    
            var vehicleIDParameter = vehicleID != null ?
                new ObjectParameter("vehicleID", vehicleID) :
                new ObjectParameter("vehicleID", typeof(string));
    
            var currentMonthParameter = currentMonth.HasValue ?
                new ObjectParameter("currentMonth", currentMonth) :
                new ObjectParameter("currentMonth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCaptainProfile_Result>("spCaptainProfile", captainIDParameter, vehicleIDParameter, currentMonthParameter);
        }
    
        public virtual ObjectResult<spCaptainTripHistory_Result> spCaptainTripHistory(string captainID, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var captainIDParameter = captainID != null ?
                new ObjectParameter("CaptainID", captainID) :
                new ObjectParameter("CaptainID", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCaptainTripHistory_Result>("spCaptainTripHistory", captainIDParameter, pageNumberParameter, pageSizeParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCheckUserWithRole(string userPhoneNumber, string userRole)
        {
            var userPhoneNumberParameter = userPhoneNumber != null ?
                new ObjectParameter("userPhoneNumber", userPhoneNumber) :
                new ObjectParameter("userPhoneNumber", typeof(string));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("userRole", userRole) :
                new ObjectParameter("userRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCheckUserWithRole", userPhoneNumberParameter, userRoleParameter);
        }
    
        public virtual ObjectResult<spCreateWalkInTrip_Result> spCreateWalkInTrip(Nullable<System.Guid> tripID, Nullable<System.Guid> resellerID, Nullable<System.Guid> applicationID, Nullable<System.Guid> fleetID, Nullable<System.Guid> pID, Nullable<System.Guid> captainID, Nullable<System.Guid> vehicleID, string pickupLocationLatitude, string pickupLocationLongitude, string pickUpLocation, string dropOffLocationLatitude, string dropOffLocationLongitude, string dropOffLocation, Nullable<double> distanceTraveled, Nullable<int> tripStatusID, Nullable<System.DateTime> bookingDateTime, string tripPaymentMode, Nullable<int> bookingModeID, Nullable<int> bookingTypeID, Nullable<int> noOfPerson, Nullable<int> uTCTimeZoneOffset, string paymentReference, Nullable<decimal> paymentTip, Nullable<decimal> perKMFare, Nullable<decimal> walletUsedAmount, Nullable<int> paymentModeID, Nullable<int> paymentStatusID, Nullable<decimal> voucherUsedAmount, Nullable<decimal> promoDiscountAmount, Nullable<bool> isLaterBooking, Nullable<bool> isHotelBooking, string description, string facilities, Nullable<bool> isReRouted, Nullable<bool> isOverRided, string promoCodeID)
        {
            var tripIDParameter = tripID.HasValue ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(System.Guid));
    
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(System.Guid));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            var fleetIDParameter = fleetID.HasValue ?
                new ObjectParameter("fleetID", fleetID) :
                new ObjectParameter("fleetID", typeof(System.Guid));
    
            var pIDParameter = pID.HasValue ?
                new ObjectParameter("pID", pID) :
                new ObjectParameter("pID", typeof(System.Guid));
    
            var captainIDParameter = captainID.HasValue ?
                new ObjectParameter("captainID", captainID) :
                new ObjectParameter("captainID", typeof(System.Guid));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("vehicleID", vehicleID) :
                new ObjectParameter("vehicleID", typeof(System.Guid));
    
            var pickupLocationLatitudeParameter = pickupLocationLatitude != null ?
                new ObjectParameter("PickupLocationLatitude", pickupLocationLatitude) :
                new ObjectParameter("PickupLocationLatitude", typeof(string));
    
            var pickupLocationLongitudeParameter = pickupLocationLongitude != null ?
                new ObjectParameter("PickupLocationLongitude", pickupLocationLongitude) :
                new ObjectParameter("PickupLocationLongitude", typeof(string));
    
            var pickUpLocationParameter = pickUpLocation != null ?
                new ObjectParameter("PickUpLocation", pickUpLocation) :
                new ObjectParameter("PickUpLocation", typeof(string));
    
            var dropOffLocationLatitudeParameter = dropOffLocationLatitude != null ?
                new ObjectParameter("DropOffLocationLatitude", dropOffLocationLatitude) :
                new ObjectParameter("DropOffLocationLatitude", typeof(string));
    
            var dropOffLocationLongitudeParameter = dropOffLocationLongitude != null ?
                new ObjectParameter("DropOffLocationLongitude", dropOffLocationLongitude) :
                new ObjectParameter("DropOffLocationLongitude", typeof(string));
    
            var dropOffLocationParameter = dropOffLocation != null ?
                new ObjectParameter("DropOffLocation", dropOffLocation) :
                new ObjectParameter("DropOffLocation", typeof(string));
    
            var distanceTraveledParameter = distanceTraveled.HasValue ?
                new ObjectParameter("DistanceTraveled", distanceTraveled) :
                new ObjectParameter("DistanceTraveled", typeof(double));
    
            var tripStatusIDParameter = tripStatusID.HasValue ?
                new ObjectParameter("TripStatusID", tripStatusID) :
                new ObjectParameter("TripStatusID", typeof(int));
    
            var bookingDateTimeParameter = bookingDateTime.HasValue ?
                new ObjectParameter("BookingDateTime", bookingDateTime) :
                new ObjectParameter("BookingDateTime", typeof(System.DateTime));
    
            var tripPaymentModeParameter = tripPaymentMode != null ?
                new ObjectParameter("TripPaymentMode", tripPaymentMode) :
                new ObjectParameter("TripPaymentMode", typeof(string));
    
            var bookingModeIDParameter = bookingModeID.HasValue ?
                new ObjectParameter("BookingModeID", bookingModeID) :
                new ObjectParameter("BookingModeID", typeof(int));
    
            var bookingTypeIDParameter = bookingTypeID.HasValue ?
                new ObjectParameter("BookingTypeID", bookingTypeID) :
                new ObjectParameter("BookingTypeID", typeof(int));
    
            var noOfPersonParameter = noOfPerson.HasValue ?
                new ObjectParameter("NoOfPerson", noOfPerson) :
                new ObjectParameter("NoOfPerson", typeof(int));
    
            var uTCTimeZoneOffsetParameter = uTCTimeZoneOffset.HasValue ?
                new ObjectParameter("UTCTimeZoneOffset", uTCTimeZoneOffset) :
                new ObjectParameter("UTCTimeZoneOffset", typeof(int));
    
            var paymentReferenceParameter = paymentReference != null ?
                new ObjectParameter("paymentReference", paymentReference) :
                new ObjectParameter("paymentReference", typeof(string));
    
            var paymentTipParameter = paymentTip.HasValue ?
                new ObjectParameter("paymentTip", paymentTip) :
                new ObjectParameter("paymentTip", typeof(decimal));
    
            var perKMFareParameter = perKMFare.HasValue ?
                new ObjectParameter("perKMFare", perKMFare) :
                new ObjectParameter("perKMFare", typeof(decimal));
    
            var walletUsedAmountParameter = walletUsedAmount.HasValue ?
                new ObjectParameter("walletUsedAmount", walletUsedAmount) :
                new ObjectParameter("walletUsedAmount", typeof(decimal));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("paymentModeID", paymentModeID) :
                new ObjectParameter("paymentModeID", typeof(int));
    
            var paymentStatusIDParameter = paymentStatusID.HasValue ?
                new ObjectParameter("paymentStatusID", paymentStatusID) :
                new ObjectParameter("paymentStatusID", typeof(int));
    
            var voucherUsedAmountParameter = voucherUsedAmount.HasValue ?
                new ObjectParameter("voucherUsedAmount", voucherUsedAmount) :
                new ObjectParameter("voucherUsedAmount", typeof(decimal));
    
            var promoDiscountAmountParameter = promoDiscountAmount.HasValue ?
                new ObjectParameter("promoDiscountAmount", promoDiscountAmount) :
                new ObjectParameter("promoDiscountAmount", typeof(decimal));
    
            var isLaterBookingParameter = isLaterBooking.HasValue ?
                new ObjectParameter("isLaterBooking", isLaterBooking) :
                new ObjectParameter("isLaterBooking", typeof(bool));
    
            var isHotelBookingParameter = isHotelBooking.HasValue ?
                new ObjectParameter("isHotelBooking", isHotelBooking) :
                new ObjectParameter("isHotelBooking", typeof(bool));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var facilitiesParameter = facilities != null ?
                new ObjectParameter("facilities", facilities) :
                new ObjectParameter("facilities", typeof(string));
    
            var isReRoutedParameter = isReRouted.HasValue ?
                new ObjectParameter("isReRouted", isReRouted) :
                new ObjectParameter("isReRouted", typeof(bool));
    
            var isOverRidedParameter = isOverRided.HasValue ?
                new ObjectParameter("isOverRided", isOverRided) :
                new ObjectParameter("isOverRided", typeof(bool));
    
            var promoCodeIDParameter = promoCodeID != null ?
                new ObjectParameter("PromoCodeID", promoCodeID) :
                new ObjectParameter("PromoCodeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCreateWalkInTrip_Result>("spCreateWalkInTrip", tripIDParameter, resellerIDParameter, applicationIDParameter, fleetIDParameter, pIDParameter, captainIDParameter, vehicleIDParameter, pickupLocationLatitudeParameter, pickupLocationLongitudeParameter, pickUpLocationParameter, dropOffLocationLatitudeParameter, dropOffLocationLongitudeParameter, dropOffLocationParameter, distanceTraveledParameter, tripStatusIDParameter, bookingDateTimeParameter, tripPaymentModeParameter, bookingModeIDParameter, bookingTypeIDParameter, noOfPersonParameter, uTCTimeZoneOffsetParameter, paymentReferenceParameter, paymentTipParameter, perKMFareParameter, walletUsedAmountParameter, paymentModeIDParameter, paymentStatusIDParameter, voucherUsedAmountParameter, promoDiscountAmountParameter, isLaterBookingParameter, isHotelBookingParameter, descriptionParameter, facilitiesParameter, isReRoutedParameter, isOverRidedParameter, promoCodeIDParameter);
        }
    
        public virtual ObjectResult<spGetAllUnAcceptedLateBooking_Result> spGetAllUnAcceptedLateBooking(string resellerID, string applicationID, Nullable<System.DateTime> pickUpDateTime, Nullable<int> tripStatusID, Nullable<int> seatingCapacity, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var resellerIDParameter = resellerID != null ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(string));
    
            var applicationIDParameter = applicationID != null ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(string));
    
            var pickUpDateTimeParameter = pickUpDateTime.HasValue ?
                new ObjectParameter("pickUpDateTime", pickUpDateTime) :
                new ObjectParameter("pickUpDateTime", typeof(System.DateTime));
    
            var tripStatusIDParameter = tripStatusID.HasValue ?
                new ObjectParameter("tripStatusID", tripStatusID) :
                new ObjectParameter("tripStatusID", typeof(int));
    
            var seatingCapacityParameter = seatingCapacity.HasValue ?
                new ObjectParameter("SeatingCapacity", seatingCapacity) :
                new ObjectParameter("SeatingCapacity", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllUnAcceptedLateBooking_Result>("spGetAllUnAcceptedLateBooking", resellerIDParameter, applicationIDParameter, pickUpDateTimeParameter, tripStatusIDParameter, seatingCapacityParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<spGetApplicationAllFleets_Result> spGetApplicationAllFleets(string applicationId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var applicationIdParameter = applicationId != null ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationAllFleets_Result>("spGetApplicationAllFleets", applicationIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<spGetApplicationArea_Result> spGetApplicationArea(string applicationID)
        {
            var applicationIDParameter = applicationID != null ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetApplicationArea_Result>("spGetApplicationArea", applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetCaptainMonthlyInvoice_Result> spGetCaptainMonthlyInvoice(string captainId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var captainIdParameter = captainId != null ?
                new ObjectParameter("CaptainId", captainId) :
                new ObjectParameter("CaptainId", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCaptainMonthlyInvoice_Result>("spGetCaptainMonthlyInvoice", captainIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<spGetCaptainOccupiedVehicleDetails_Result> spGetCaptainOccupiedVehicleDetails(string resellerID, string applicationID, string captainID)
        {
            var resellerIDParameter = resellerID != null ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(string));
    
            var applicationIDParameter = applicationID != null ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(string));
    
            var captainIDParameter = captainID != null ?
                new ObjectParameter("captainID", captainID) :
                new ObjectParameter("captainID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCaptainOccupiedVehicleDetails_Result>("spGetCaptainOccupiedVehicleDetails", resellerIDParameter, applicationIDParameter, captainIDParameter);
        }
    
        public virtual ObjectResult<spGetCurrentReportNumber_Result> spGetCurrentReportNumber(string fleetId, string reportMonth, string status, Nullable<System.DateTime> processingStartDateTime)
        {
            var fleetIdParameter = fleetId != null ?
                new ObjectParameter("FleetId", fleetId) :
                new ObjectParameter("FleetId", typeof(string));
    
            var reportMonthParameter = reportMonth != null ?
                new ObjectParameter("ReportMonth", reportMonth) :
                new ObjectParameter("ReportMonth", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var processingStartDateTimeParameter = processingStartDateTime.HasValue ?
                new ObjectParameter("ProcessingStartDateTime", processingStartDateTime) :
                new ObjectParameter("ProcessingStartDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCurrentReportNumber_Result>("spGetCurrentReportNumber", fleetIdParameter, reportMonthParameter, statusParameter, processingStartDateTimeParameter);
        }
    
        public virtual ObjectResult<spGetDriverUserDeviceTokens_Result> spGetDriverUserDeviceTokens(string tripID)
        {
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDriverUserDeviceTokens_Result>("spGetDriverUserDeviceTokens", tripIDParameter);
        }
    
        public virtual ObjectResult<spGetFleetMonthlyInvoice_Result> spGetFleetMonthlyInvoice(string fleetId, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var fleetIdParameter = fleetId != null ?
                new ObjectParameter("FleetId", fleetId) :
                new ObjectParameter("FleetId", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFleetMonthlyInvoice_Result>("spGetFleetMonthlyInvoice", fleetIdParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<spGetOnlineDriver_Result> spGetOnlineDriver(string captainIDs)
        {
            var captainIDsParameter = captainIDs != null ?
                new ObjectParameter("captainIDs", captainIDs) :
                new ObjectParameter("captainIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOnlineDriver_Result>("spGetOnlineDriver", captainIDsParameter);
        }
    
        public virtual int spGetOnlineDriver_Temp_Deprecated(string captainIDs)
        {
            var captainIDsParameter = captainIDs != null ?
                new ObjectParameter("captainIDs", captainIDs) :
                new ObjectParameter("captainIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetOnlineDriver_Temp_Deprecated", captainIDsParameter);
        }
    
        public virtual ObjectResult<spGetPassengerTripHistory_Result> spGetPassengerTripHistory(string passengerID, Nullable<int> tripStatuCancalled, Nullable<int> tripStatusCompleted, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var passengerIDParameter = passengerID != null ?
                new ObjectParameter("passengerID", passengerID) :
                new ObjectParameter("passengerID", typeof(string));
    
            var tripStatuCancalledParameter = tripStatuCancalled.HasValue ?
                new ObjectParameter("tripStatuCancalled", tripStatuCancalled) :
                new ObjectParameter("tripStatuCancalled", typeof(int));
    
            var tripStatusCompletedParameter = tripStatusCompleted.HasValue ?
                new ObjectParameter("tripStatusCompleted", tripStatusCompleted) :
                new ObjectParameter("tripStatusCompleted", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPassengerTripHistory_Result>("spGetPassengerTripHistory", passengerIDParameter, tripStatuCancalledParameter, tripStatusCompletedParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<spGetResellerPaypalAccountDetail_Result> spGetResellerPaypalAccountDetail(string tripID, string driverID)
        {
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            var driverIDParameter = driverID != null ?
                new ObjectParameter("driverID", driverID) :
                new ObjectParameter("driverID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetResellerPaypalAccountDetail_Result>("spGetResellerPaypalAccountDetail", tripIDParameter, driverIDParameter);
        }
    
        public virtual ObjectResult<spGetRideDetail_Result> spGetRideDetail(string tripID, Nullable<int> tripStatusID, Nullable<bool> isHotel)
        {
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            var tripStatusIDParameter = tripStatusID.HasValue ?
                new ObjectParameter("tripStatusID", tripStatusID) :
                new ObjectParameter("tripStatusID", typeof(int));
    
            var isHotelParameter = isHotel.HasValue ?
                new ObjectParameter("isHotel", isHotel) :
                new ObjectParameter("isHotel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRideDetail_Result>("spGetRideDetail", tripIDParameter, tripStatusIDParameter, isHotelParameter);
        }
    
        public virtual ObjectResult<spGetTripPassengerDetailsByTripID_Result> spGetTripPassengerDetailsByTripID(string tripID)
        {
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTripPassengerDetailsByTripID_Result>("spGetTripPassengerDetailsByTripID", tripIDParameter);
        }
    
        public virtual ObjectResult<spGetTripPassengerTokenByTripIDOnCollectPayment_Result> spGetTripPassengerTokenByTripIDOnCollectPayment(string tripID, Nullable<int> tripStatuID)
        {
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            var tripStatuIDParameter = tripStatuID.HasValue ?
                new ObjectParameter("tripStatuID", tripStatuID) :
                new ObjectParameter("tripStatuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTripPassengerTokenByTripIDOnCollectPayment_Result>("spGetTripPassengerTokenByTripIDOnCollectPayment", tripIDParameter, tripStatuIDParameter);
        }
    
        public virtual ObjectResult<spGetUpcomingLaterBooking_Result> spGetUpcomingLaterBooking(string currentDateTime, Nullable<int> tripStatusID)
        {
            var currentDateTimeParameter = currentDateTime != null ?
                new ObjectParameter("currentDateTime", currentDateTime) :
                new ObjectParameter("currentDateTime", typeof(string));
    
            var tripStatusIDParameter = tripStatusID.HasValue ?
                new ObjectParameter("tripStatusID", tripStatusID) :
                new ObjectParameter("tripStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUpcomingLaterBooking_Result>("spGetUpcomingLaterBooking", currentDateTimeParameter, tripStatusIDParameter);
        }
    
        public virtual ObjectResult<spGetUpcomingLaterBookingByDriverID_Result> spGetUpcomingLaterBookingByDriverID(string driverID, string currentDateTime, Nullable<int> tripStatusID)
        {
            var driverIDParameter = driverID != null ?
                new ObjectParameter("driverID", driverID) :
                new ObjectParameter("driverID", typeof(string));
    
            var currentDateTimeParameter = currentDateTime != null ?
                new ObjectParameter("currentDateTime", currentDateTime) :
                new ObjectParameter("currentDateTime", typeof(string));
    
            var tripStatusIDParameter = tripStatusID.HasValue ?
                new ObjectParameter("tripStatusID", tripStatusID) :
                new ObjectParameter("tripStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUpcomingLaterBookingByDriverID_Result>("spGetUpcomingLaterBookingByDriverID", driverIDParameter, currentDateTimeParameter, tripStatusIDParameter);
        }
    
        public virtual ObjectResult<spGetUpdateTripOnCaptainArrived_Result> spGetUpdateTripOnCaptainArrived(Nullable<System.DateTime> arrivalDateTime, Nullable<double> earnedPoints, string tripID, string driverID, Nullable<bool> isHotel)
        {
            var arrivalDateTimeParameter = arrivalDateTime.HasValue ?
                new ObjectParameter("arrivalDateTime", arrivalDateTime) :
                new ObjectParameter("arrivalDateTime", typeof(System.DateTime));
    
            var earnedPointsParameter = earnedPoints.HasValue ?
                new ObjectParameter("earnedPoints", earnedPoints) :
                new ObjectParameter("earnedPoints", typeof(double));
    
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            var driverIDParameter = driverID != null ?
                new ObjectParameter("driverID", driverID) :
                new ObjectParameter("driverID", typeof(string));
    
            var isHotelParameter = isHotel.HasValue ?
                new ObjectParameter("isHotel", isHotel) :
                new ObjectParameter("isHotel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUpdateTripOnCaptainArrived_Result>("spGetUpdateTripOnCaptainArrived", arrivalDateTimeParameter, earnedPointsParameter, tripIDParameter, driverIDParameter, isHotelParameter);
        }
    
        public virtual ObjectResult<spGetUserCaptainDetail_Result> spGetUserCaptainDetail(string userID, Nullable<int> tripStatusID, string driverID, string tripID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var tripStatusIDParameter = tripStatusID.HasValue ?
                new ObjectParameter("tripStatusID", tripStatusID) :
                new ObjectParameter("tripStatusID", typeof(int));
    
            var driverIDParameter = driverID != null ?
                new ObjectParameter("driverID", driverID) :
                new ObjectParameter("driverID", typeof(string));
    
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserCaptainDetail_Result>("spGetUserCaptainDetail", userIDParameter, tripStatusIDParameter, driverIDParameter, tripIDParameter);
        }
    
        public virtual ObjectResult<spGetUserDeviceToken_Result> spGetUserDeviceToken(string tripID, Nullable<int> tripStatusID)
        {
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            var tripStatusIDParameter = tripStatusID.HasValue ?
                new ObjectParameter("tripStatusID", tripStatusID) :
                new ObjectParameter("tripStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserDeviceToken_Result>("spGetUserDeviceToken", tripIDParameter, tripStatusIDParameter);
        }
    
        public virtual ObjectResult<spGetUserUpdateTripOnStartRide_Result> spGetUserUpdateTripOnStartRide(Nullable<System.DateTime> startDateTime, string tripID, string driverID, Nullable<bool> isHotel)
        {
            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("startDateTime", startDateTime) :
                new ObjectParameter("startDateTime", typeof(System.DateTime));
    
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            var driverIDParameter = driverID != null ?
                new ObjectParameter("driverID", driverID) :
                new ObjectParameter("driverID", typeof(string));
    
            var isHotelParameter = isHotel.HasValue ?
                new ObjectParameter("isHotel", isHotel) :
                new ObjectParameter("isHotel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserUpdateTripOnStartRide_Result>("spGetUserUpdateTripOnStartRide", startDateTimeParameter, tripIDParameter, driverIDParameter, isHotelParameter);
        }
    
        public virtual ObjectResult<spPassengerCancelRide_Result> spPassengerCancelRide(string tripID, Nullable<int> cancelID, Nullable<int> tripCancelID, Nullable<double> earnedPoints)
        {
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            var cancelIDParameter = cancelID.HasValue ?
                new ObjectParameter("cancelID", cancelID) :
                new ObjectParameter("cancelID", typeof(int));
    
            var tripCancelIDParameter = tripCancelID.HasValue ?
                new ObjectParameter("tripCancelID", tripCancelID) :
                new ObjectParameter("tripCancelID", typeof(int));
    
            var earnedPointsParameter = earnedPoints.HasValue ?
                new ObjectParameter("earnedPoints", earnedPoints) :
                new ObjectParameter("earnedPoints", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPassengerCancelRide_Result>("spPassengerCancelRide", tripIDParameter, cancelIDParameter, tripCancelIDParameter, earnedPointsParameter);
        }
    
        public virtual ObjectResult<spPhoneVerication_Result> spPhoneVerication(string phone, string role)
        {
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPhoneVerication_Result>("spPhoneVerication", phoneParameter, roleParameter);
        }
    
        public virtual ObjectResult<spSearchUserByPhone_Result> spSearchUserByPhone(string phoneNumber)
        {
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSearchUserByPhone_Result>("spSearchUserByPhone", phoneNumberParameter);
        }
    
        public virtual ObjectResult<spUpcomingLaterBookingDetailsForCancel_Result> spUpcomingLaterBookingDetailsForCancel(string tripID)
        {
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUpcomingLaterBookingDetailsForCancel_Result>("spUpcomingLaterBookingDetailsForCancel", tripIDParameter);
        }
    
        public virtual ObjectResult<spUpcomingTripByUserID_Result> spUpcomingTripByUserID(string pID, Nullable<System.DateTime> pickUpDateTime, Nullable<int> bookingTypeID, Nullable<int> tripStatusID, Nullable<int> pageNumber, Nullable<int> pageSize)
        {
            var pIDParameter = pID != null ?
                new ObjectParameter("pID", pID) :
                new ObjectParameter("pID", typeof(string));
    
            var pickUpDateTimeParameter = pickUpDateTime.HasValue ?
                new ObjectParameter("pickUpDateTime", pickUpDateTime) :
                new ObjectParameter("pickUpDateTime", typeof(System.DateTime));
    
            var bookingTypeIDParameter = bookingTypeID.HasValue ?
                new ObjectParameter("bookingTypeID", bookingTypeID) :
                new ObjectParameter("bookingTypeID", typeof(int));
    
            var tripStatusIDParameter = tripStatusID.HasValue ?
                new ObjectParameter("tripStatusID", tripStatusID) :
                new ObjectParameter("tripStatusID", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUpcomingTripByUserID_Result>("spUpcomingTripByUserID", pIDParameter, pickUpDateTimeParameter, bookingTypeIDParameter, tripStatusIDParameter, pageNumberParameter, pageSizeParameter);
        }
    
        public virtual int spUpdateApplication(Nullable<System.Guid> resellerID, Nullable<System.Guid> applicationID, string ownerName, string companyName, string logo, string originalLogo, string contractFile, string originalContractFile, string authorizedArea, Nullable<double> percentagePayable, Nullable<double> percentageReceiveable, Nullable<int> subscriptionPlanID, Nullable<System.DateTime> subscriptionDate, Nullable<System.DateTime> paymentDueDate, Nullable<int> subscriptionTypeID, Nullable<int> paymentModeID, Nullable<int> paymentTypeID, Nullable<int> paymentStatusID, string paypalAccountNumber, string address, string taxNumber, string subscribedModules, string paypalEmail, string paypalNationalNumber, string paypalCountryCode, string paypalPhoneExt, string phoneNumber)
        {
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("ResellerID", resellerID) :
                new ObjectParameter("ResellerID", typeof(System.Guid));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var originalLogoParameter = originalLogo != null ?
                new ObjectParameter("OriginalLogo", originalLogo) :
                new ObjectParameter("OriginalLogo", typeof(string));
    
            var contractFileParameter = contractFile != null ?
                new ObjectParameter("ContractFile", contractFile) :
                new ObjectParameter("ContractFile", typeof(string));
    
            var originalContractFileParameter = originalContractFile != null ?
                new ObjectParameter("OriginalContractFile", originalContractFile) :
                new ObjectParameter("OriginalContractFile", typeof(string));
    
            var authorizedAreaParameter = authorizedArea != null ?
                new ObjectParameter("AuthorizedArea", authorizedArea) :
                new ObjectParameter("AuthorizedArea", typeof(string));
    
            var percentagePayableParameter = percentagePayable.HasValue ?
                new ObjectParameter("PercentagePayable", percentagePayable) :
                new ObjectParameter("PercentagePayable", typeof(double));
    
            var percentageReceiveableParameter = percentageReceiveable.HasValue ?
                new ObjectParameter("PercentageReceiveable", percentageReceiveable) :
                new ObjectParameter("PercentageReceiveable", typeof(double));
    
            var subscriptionPlanIDParameter = subscriptionPlanID.HasValue ?
                new ObjectParameter("SubscriptionPlanID", subscriptionPlanID) :
                new ObjectParameter("SubscriptionPlanID", typeof(int));
    
            var subscriptionDateParameter = subscriptionDate.HasValue ?
                new ObjectParameter("SubscriptionDate", subscriptionDate) :
                new ObjectParameter("SubscriptionDate", typeof(System.DateTime));
    
            var paymentDueDateParameter = paymentDueDate.HasValue ?
                new ObjectParameter("PaymentDueDate", paymentDueDate) :
                new ObjectParameter("PaymentDueDate", typeof(System.DateTime));
    
            var subscriptionTypeIDParameter = subscriptionTypeID.HasValue ?
                new ObjectParameter("SubscriptionTypeID", subscriptionTypeID) :
                new ObjectParameter("SubscriptionTypeID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var paymentStatusIDParameter = paymentStatusID.HasValue ?
                new ObjectParameter("PaymentStatusID", paymentStatusID) :
                new ObjectParameter("PaymentStatusID", typeof(int));
    
            var paypalAccountNumberParameter = paypalAccountNumber != null ?
                new ObjectParameter("PaypalAccountNumber", paypalAccountNumber) :
                new ObjectParameter("PaypalAccountNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var subscribedModulesParameter = subscribedModules != null ?
                new ObjectParameter("SubscribedModules", subscribedModules) :
                new ObjectParameter("SubscribedModules", typeof(string));
    
            var paypalEmailParameter = paypalEmail != null ?
                new ObjectParameter("PaypalEmail", paypalEmail) :
                new ObjectParameter("PaypalEmail", typeof(string));
    
            var paypalNationalNumberParameter = paypalNationalNumber != null ?
                new ObjectParameter("PaypalNationalNumber", paypalNationalNumber) :
                new ObjectParameter("PaypalNationalNumber", typeof(string));
    
            var paypalCountryCodeParameter = paypalCountryCode != null ?
                new ObjectParameter("PaypalCountryCode", paypalCountryCode) :
                new ObjectParameter("PaypalCountryCode", typeof(string));
    
            var paypalPhoneExtParameter = paypalPhoneExt != null ?
                new ObjectParameter("PaypalPhoneExt", paypalPhoneExt) :
                new ObjectParameter("PaypalPhoneExt", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateApplication", resellerIDParameter, applicationIDParameter, ownerNameParameter, companyNameParameter, logoParameter, originalLogoParameter, contractFileParameter, originalContractFileParameter, authorizedAreaParameter, percentagePayableParameter, percentageReceiveableParameter, subscriptionPlanIDParameter, subscriptionDateParameter, paymentDueDateParameter, subscriptionTypeIDParameter, paymentModeIDParameter, paymentTypeIDParameter, paymentStatusIDParameter, paypalAccountNumberParameter, addressParameter, taxNumberParameter, subscribedModulesParameter, paypalEmailParameter, paypalNationalNumberParameter, paypalCountryCodeParameter, paypalPhoneExtParameter, phoneNumberParameter);
        }
    
        public virtual int spUpdateReportStatus(Nullable<int> reportId, string status, Nullable<System.DateTime> processingEndDateTime)
        {
            var reportIdParameter = reportId.HasValue ?
                new ObjectParameter("ReportId", reportId) :
                new ObjectParameter("ReportId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var processingEndDateTimeParameter = processingEndDateTime.HasValue ?
                new ObjectParameter("ProcessingEndDateTime", processingEndDateTime) :
                new ObjectParameter("ProcessingEndDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateReportStatus", reportIdParameter, statusParameter, processingEndDateTimeParameter);
        }
    
        public virtual int spUpdateReseller(Nullable<System.Guid> resellerID, string ownerName, string companyName, string logo, string originalLogo, string contractFile, string originalContractFile, string authorizedArea, Nullable<double> percentagePayable, Nullable<double> percentageReceiveable, Nullable<int> subscriptionPlanID, Nullable<System.DateTime> subscriptionDate, Nullable<System.DateTime> paymentDueDate, Nullable<int> subscriptionTypeID, Nullable<int> paymentModeID, Nullable<int> paymentTypeID, Nullable<int> paymentStatusID, string paypalAccountNumber, string address, string taxNumber, string subscribedModules, string paypalEmail, string paypalNationalNumber, string paypalCountryCode, string paypalPhoneExt, string phoneNumber)
        {
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("ResellerID", resellerID) :
                new ObjectParameter("ResellerID", typeof(System.Guid));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var originalLogoParameter = originalLogo != null ?
                new ObjectParameter("OriginalLogo", originalLogo) :
                new ObjectParameter("OriginalLogo", typeof(string));
    
            var contractFileParameter = contractFile != null ?
                new ObjectParameter("ContractFile", contractFile) :
                new ObjectParameter("ContractFile", typeof(string));
    
            var originalContractFileParameter = originalContractFile != null ?
                new ObjectParameter("OriginalContractFile", originalContractFile) :
                new ObjectParameter("OriginalContractFile", typeof(string));
    
            var authorizedAreaParameter = authorizedArea != null ?
                new ObjectParameter("AuthorizedArea", authorizedArea) :
                new ObjectParameter("AuthorizedArea", typeof(string));
    
            var percentagePayableParameter = percentagePayable.HasValue ?
                new ObjectParameter("PercentagePayable", percentagePayable) :
                new ObjectParameter("PercentagePayable", typeof(double));
    
            var percentageReceiveableParameter = percentageReceiveable.HasValue ?
                new ObjectParameter("PercentageReceiveable", percentageReceiveable) :
                new ObjectParameter("PercentageReceiveable", typeof(double));
    
            var subscriptionPlanIDParameter = subscriptionPlanID.HasValue ?
                new ObjectParameter("SubscriptionPlanID", subscriptionPlanID) :
                new ObjectParameter("SubscriptionPlanID", typeof(int));
    
            var subscriptionDateParameter = subscriptionDate.HasValue ?
                new ObjectParameter("SubscriptionDate", subscriptionDate) :
                new ObjectParameter("SubscriptionDate", typeof(System.DateTime));
    
            var paymentDueDateParameter = paymentDueDate.HasValue ?
                new ObjectParameter("PaymentDueDate", paymentDueDate) :
                new ObjectParameter("PaymentDueDate", typeof(System.DateTime));
    
            var subscriptionTypeIDParameter = subscriptionTypeID.HasValue ?
                new ObjectParameter("SubscriptionTypeID", subscriptionTypeID) :
                new ObjectParameter("SubscriptionTypeID", typeof(int));
    
            var paymentModeIDParameter = paymentModeID.HasValue ?
                new ObjectParameter("PaymentModeID", paymentModeID) :
                new ObjectParameter("PaymentModeID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var paymentStatusIDParameter = paymentStatusID.HasValue ?
                new ObjectParameter("PaymentStatusID", paymentStatusID) :
                new ObjectParameter("PaymentStatusID", typeof(int));
    
            var paypalAccountNumberParameter = paypalAccountNumber != null ?
                new ObjectParameter("PaypalAccountNumber", paypalAccountNumber) :
                new ObjectParameter("PaypalAccountNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var taxNumberParameter = taxNumber != null ?
                new ObjectParameter("TaxNumber", taxNumber) :
                new ObjectParameter("TaxNumber", typeof(string));
    
            var subscribedModulesParameter = subscribedModules != null ?
                new ObjectParameter("SubscribedModules", subscribedModules) :
                new ObjectParameter("SubscribedModules", typeof(string));
    
            var paypalEmailParameter = paypalEmail != null ?
                new ObjectParameter("PaypalEmail", paypalEmail) :
                new ObjectParameter("PaypalEmail", typeof(string));
    
            var paypalNationalNumberParameter = paypalNationalNumber != null ?
                new ObjectParameter("PaypalNationalNumber", paypalNationalNumber) :
                new ObjectParameter("PaypalNationalNumber", typeof(string));
    
            var paypalCountryCodeParameter = paypalCountryCode != null ?
                new ObjectParameter("PaypalCountryCode", paypalCountryCode) :
                new ObjectParameter("PaypalCountryCode", typeof(string));
    
            var paypalPhoneExtParameter = paypalPhoneExt != null ?
                new ObjectParameter("PaypalPhoneExt", paypalPhoneExt) :
                new ObjectParameter("PaypalPhoneExt", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateReseller", resellerIDParameter, ownerNameParameter, companyNameParameter, logoParameter, originalLogoParameter, contractFileParameter, originalContractFileParameter, authorizedAreaParameter, percentagePayableParameter, percentageReceiveableParameter, subscriptionPlanIDParameter, subscriptionDateParameter, paymentDueDateParameter, subscriptionTypeIDParameter, paymentModeIDParameter, paymentTypeIDParameter, paymentStatusIDParameter, paypalAccountNumberParameter, addressParameter, taxNumberParameter, subscribedModulesParameter, paypalEmailParameter, paypalNationalNumberParameter, paypalCountryCodeParameter, paypalPhoneExtParameter, phoneNumberParameter);
        }
    
        public virtual ObjectResult<spVehicleProfile_Result> spVehicleProfile(string vehicleID)
        {
            var vehicleIDParameter = vehicleID != null ?
                new ObjectParameter("vehicleID", vehicleID) :
                new ObjectParameter("vehicleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spVehicleProfile_Result>("spVehicleProfile", vehicleIDParameter);
        }
    
        public virtual ObjectResult<string> TransferFundToBenificiary(Nullable<System.Guid> guardianID, Nullable<System.Guid> childID, Nullable<decimal> voucherAmount, string description, Nullable<System.DateTime> transactionDate, Nullable<System.Guid> detailID, Nullable<System.Guid> appliactionID, Nullable<System.Guid> resellerID)
        {
            var guardianIDParameter = guardianID.HasValue ?
                new ObjectParameter("guardianID", guardianID) :
                new ObjectParameter("guardianID", typeof(System.Guid));
    
            var childIDParameter = childID.HasValue ?
                new ObjectParameter("childID", childID) :
                new ObjectParameter("childID", typeof(System.Guid));
    
            var voucherAmountParameter = voucherAmount.HasValue ?
                new ObjectParameter("voucherAmount", voucherAmount) :
                new ObjectParameter("voucherAmount", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("transactionDate", transactionDate) :
                new ObjectParameter("transactionDate", typeof(System.DateTime));
    
            var detailIDParameter = detailID.HasValue ?
                new ObjectParameter("detailID", detailID) :
                new ObjectParameter("detailID", typeof(System.Guid));
    
            var appliactionIDParameter = appliactionID.HasValue ?
                new ObjectParameter("appliactionID", appliactionID) :
                new ObjectParameter("appliactionID", typeof(System.Guid));
    
            var resellerIDParameter = resellerID.HasValue ?
                new ObjectParameter("resellerID", resellerID) :
                new ObjectParameter("resellerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TransferFundToBenificiary", guardianIDParameter, childIDParameter, voucherAmountParameter, descriptionParameter, transactionDateParameter, detailIDParameter, appliactionIDParameter, resellerIDParameter);
        }
    
        public virtual ObjectResult<UpdateApplicationSettings_Result> UpdateApplicationSettings(Nullable<System.Guid> applicationID, Nullable<double> perKmAwardPoints, Nullable<double> priorityAreaRange, Nullable<double> requestResponseTime, Nullable<double> requestSearchRange, Nullable<double> requestWaitingTime, Nullable<double> awardpointsDeduction, Nullable<double> awardPointsThreshold, Nullable<int> arrivedTime, string originalPicture, string profilePicture, Nullable<double> laterBookingRequestSearchRange, Nullable<double> captainMinRating, Nullable<double> captainMinAcceptanceRate, Nullable<int> requestRadiusInterval, Nullable<int> captainAllowedIdleTimeInSeconds, Nullable<int> wishCarRadius)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            var perKmAwardPointsParameter = perKmAwardPoints.HasValue ?
                new ObjectParameter("PerKmAwardPoints", perKmAwardPoints) :
                new ObjectParameter("PerKmAwardPoints", typeof(double));
    
            var priorityAreaRangeParameter = priorityAreaRange.HasValue ?
                new ObjectParameter("PriorityAreaRange", priorityAreaRange) :
                new ObjectParameter("PriorityAreaRange", typeof(double));
    
            var requestResponseTimeParameter = requestResponseTime.HasValue ?
                new ObjectParameter("RequestResponseTime", requestResponseTime) :
                new ObjectParameter("RequestResponseTime", typeof(double));
    
            var requestSearchRangeParameter = requestSearchRange.HasValue ?
                new ObjectParameter("RequestSearchRange", requestSearchRange) :
                new ObjectParameter("RequestSearchRange", typeof(double));
    
            var requestWaitingTimeParameter = requestWaitingTime.HasValue ?
                new ObjectParameter("RequestWaitingTime", requestWaitingTime) :
                new ObjectParameter("RequestWaitingTime", typeof(double));
    
            var awardpointsDeductionParameter = awardpointsDeduction.HasValue ?
                new ObjectParameter("AwardpointsDeduction", awardpointsDeduction) :
                new ObjectParameter("AwardpointsDeduction", typeof(double));
    
            var awardPointsThresholdParameter = awardPointsThreshold.HasValue ?
                new ObjectParameter("AwardPointsThreshold", awardPointsThreshold) :
                new ObjectParameter("AwardPointsThreshold", typeof(double));
    
            var arrivedTimeParameter = arrivedTime.HasValue ?
                new ObjectParameter("arrivedTime", arrivedTime) :
                new ObjectParameter("arrivedTime", typeof(int));
    
            var originalPictureParameter = originalPicture != null ?
                new ObjectParameter("OriginalPicture", originalPicture) :
                new ObjectParameter("OriginalPicture", typeof(string));
    
            var profilePictureParameter = profilePicture != null ?
                new ObjectParameter("ProfilePicture", profilePicture) :
                new ObjectParameter("ProfilePicture", typeof(string));
    
            var laterBookingRequestSearchRangeParameter = laterBookingRequestSearchRange.HasValue ?
                new ObjectParameter("LaterBookingRequestSearchRange", laterBookingRequestSearchRange) :
                new ObjectParameter("LaterBookingRequestSearchRange", typeof(double));
    
            var captainMinRatingParameter = captainMinRating.HasValue ?
                new ObjectParameter("CaptainMinRating", captainMinRating) :
                new ObjectParameter("CaptainMinRating", typeof(double));
    
            var captainMinAcceptanceRateParameter = captainMinAcceptanceRate.HasValue ?
                new ObjectParameter("CaptainMinAcceptanceRate", captainMinAcceptanceRate) :
                new ObjectParameter("CaptainMinAcceptanceRate", typeof(double));
    
            var requestRadiusIntervalParameter = requestRadiusInterval.HasValue ?
                new ObjectParameter("RequestRadiusInterval", requestRadiusInterval) :
                new ObjectParameter("RequestRadiusInterval", typeof(int));
    
            var captainAllowedIdleTimeInSecondsParameter = captainAllowedIdleTimeInSeconds.HasValue ?
                new ObjectParameter("CaptainAllowedIdleTimeInSeconds", captainAllowedIdleTimeInSeconds) :
                new ObjectParameter("CaptainAllowedIdleTimeInSeconds", typeof(int));
    
            var wishCarRadiusParameter = wishCarRadius.HasValue ?
                new ObjectParameter("wishCarRadius", wishCarRadius) :
                new ObjectParameter("wishCarRadius", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateApplicationSettings_Result>("UpdateApplicationSettings", applicationIDParameter, perKmAwardPointsParameter, priorityAreaRangeParameter, requestResponseTimeParameter, requestSearchRangeParameter, requestWaitingTimeParameter, awardpointsDeductionParameter, awardPointsThresholdParameter, arrivedTimeParameter, originalPictureParameter, profilePictureParameter, laterBookingRequestSearchRangeParameter, captainMinRatingParameter, captainMinAcceptanceRateParameter, requestRadiusIntervalParameter, captainAllowedIdleTimeInSecondsParameter, wishCarRadiusParameter);
        }
    
        public virtual int UpdateUserProfileInfo(string userId, string firstName, string lastName, string email, string userImage, string originalImage, string paypalAccountNumber, string paypalEmail, string paypalNationalNumber, string paypalCountryCode, string paypalPhoneExt)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var userImageParameter = userImage != null ?
                new ObjectParameter("userImage", userImage) :
                new ObjectParameter("userImage", typeof(string));
    
            var originalImageParameter = originalImage != null ?
                new ObjectParameter("originalImage", originalImage) :
                new ObjectParameter("originalImage", typeof(string));
    
            var paypalAccountNumberParameter = paypalAccountNumber != null ?
                new ObjectParameter("PaypalAccountNumber", paypalAccountNumber) :
                new ObjectParameter("PaypalAccountNumber", typeof(string));
    
            var paypalEmailParameter = paypalEmail != null ?
                new ObjectParameter("paypalEmail", paypalEmail) :
                new ObjectParameter("paypalEmail", typeof(string));
    
            var paypalNationalNumberParameter = paypalNationalNumber != null ?
                new ObjectParameter("PaypalNationalNumber", paypalNationalNumber) :
                new ObjectParameter("PaypalNationalNumber", typeof(string));
    
            var paypalCountryCodeParameter = paypalCountryCode != null ?
                new ObjectParameter("paypalCountryCode", paypalCountryCode) :
                new ObjectParameter("paypalCountryCode", typeof(string));
    
            var paypalPhoneExtParameter = paypalPhoneExt != null ?
                new ObjectParameter("paypalPhoneExt", paypalPhoneExt) :
                new ObjectParameter("paypalPhoneExt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserProfileInfo", userIdParameter, firstNameParameter, lastNameParameter, emailParameter, userImageParameter, originalImageParameter, paypalAccountNumberParameter, paypalEmailParameter, paypalNationalNumberParameter, paypalCountryCodeParameter, paypalPhoneExtParameter);
        }
    
        public virtual int VehicleBookedUnBooked(string vehicleID, Nullable<bool> status)
        {
            var vehicleIDParameter = vehicleID != null ?
                new ObjectParameter("vehicleID", vehicleID) :
                new ObjectParameter("vehicleID", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VehicleBookedUnBooked", vehicleIDParameter, statusParameter);
        }
    
        public virtual int VerifyResellerEmailAddress(Nullable<System.Guid> resellerId)
        {
            var resellerIdParameter = resellerId.HasValue ?
                new ObjectParameter("resellerId", resellerId) :
                new ObjectParameter("resellerId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VerifyResellerEmailAddress", resellerIdParameter);
        }
    
        public virtual ObjectResult<FetchCangooReward_Result> FetchCangooReward(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationid)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCangooReward_Result>("FetchCangooReward", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationidParameter);
        }
    
        public virtual ObjectResult<FetchCourierServicesDistrictZones_Result> FetchCourierServicesDistrictZones(Nullable<System.Guid> applicationID)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCourierServicesDistrictZones_Result>("FetchCourierServicesDistrictZones", applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchCourierServicesZones_Result> FetchCourierServicesZones(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchCourierServicesZones_Result>("FetchCourierServicesZones", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchPopUpNotification_Result> FetchPopUpNotification(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPopUpNotification_Result>("FetchPopUpNotification", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchRideServiceArea_Result> FetchRideServiceArea(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchRideServiceArea_Result>("FetchRideServiceArea", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual int FetchRideServicePrice(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FetchRideServicePrice", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetPassengerCancelledTrips_Result> spGetPassengerCancelledTrips(string passengerID, Nullable<int> offSet, Nullable<int> limit)
        {
            var passengerIDParameter = passengerID != null ?
                new ObjectParameter("PassengerID", passengerID) :
                new ObjectParameter("PassengerID", typeof(string));
    
            var offSetParameter = offSet.HasValue ?
                new ObjectParameter("OffSet", offSet) :
                new ObjectParameter("OffSet", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPassengerCancelledTrips_Result>("spGetPassengerCancelledTrips", passengerIDParameter, offSetParameter, limitParameter);
        }
    
        public virtual ObjectResult<spGetPassengerCompletedTrips_Result> spGetPassengerCompletedTrips(string passengerID, Nullable<int> offSet, Nullable<int> limit)
        {
            var passengerIDParameter = passengerID != null ?
                new ObjectParameter("PassengerID", passengerID) :
                new ObjectParameter("PassengerID", typeof(string));
    
            var offSetParameter = offSet.HasValue ?
                new ObjectParameter("OffSet", offSet) :
                new ObjectParameter("OffSet", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPassengerCompletedTrips_Result>("spGetPassengerCompletedTrips", passengerIDParameter, offSetParameter, limitParameter);
        }
    
        public virtual ObjectResult<spGetPassengerScheduledTrips_Result> spGetPassengerScheduledTrips(string passengerID, Nullable<int> offSet, Nullable<int> limit)
        {
            var passengerIDParameter = passengerID != null ?
                new ObjectParameter("PassengerID", passengerID) :
                new ObjectParameter("PassengerID", typeof(string));
    
            var offSetParameter = offSet.HasValue ?
                new ObjectParameter("OffSet", offSet) :
                new ObjectParameter("OffSet", typeof(int));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPassengerScheduledTrips_Result>("spGetPassengerScheduledTrips", passengerIDParameter, offSetParameter, limitParameter);
        }
    
        public virtual int spUpdatePassengerPlaces(Nullable<int> type, Nullable<int> id, string name, string address, string latitude, string longitutde)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(string));
    
            var longitutdeParameter = longitutde != null ?
                new ObjectParameter("longitutde", longitutde) :
                new ObjectParameter("longitutde", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdatePassengerPlaces", typeParameter, idParameter, nameParameter, addressParameter, latitudeParameter, longitutdeParameter);
        }
    
        public virtual ObjectResult<FetchPublicHolidays_Result> FetchPublicHolidays(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPublicHolidays_Result>("FetchPublicHolidays", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetCompanyVehicle_Result> spGetCompanyVehicle(string companyID)
        {
            var companyIDParameter = companyID != null ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCompanyVehicle_Result>("spGetCompanyVehicle", companyIDParameter);
        }
    
        public virtual ObjectResult<spVehicleBookedUnBooked_Result> spVehicleBookedUnBooked(string captainID, string deviceToken, string vehicleID, Nullable<System.DateTime> logIndateTime, Nullable<bool> status)
        {
            var captainIDParameter = captainID != null ?
                new ObjectParameter("captainID", captainID) :
                new ObjectParameter("captainID", typeof(string));
    
            var deviceTokenParameter = deviceToken != null ?
                new ObjectParameter("deviceToken", deviceToken) :
                new ObjectParameter("deviceToken", typeof(string));
    
            var vehicleIDParameter = vehicleID != null ?
                new ObjectParameter("vehicleID", vehicleID) :
                new ObjectParameter("vehicleID", typeof(string));
    
            var logIndateTimeParameter = logIndateTime.HasValue ?
                new ObjectParameter("LogIndateTime", logIndateTime) :
                new ObjectParameter("LogIndateTime", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spVehicleBookedUnBooked_Result>("spVehicleBookedUnBooked", captainIDParameter, deviceTokenParameter, vehicleIDParameter, logIndateTimeParameter, statusParameter);
        }
    
        public virtual ObjectResult<FetchNotification_Result> FetchNotification(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchNotification_Result>("FetchNotification", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchPopUp_Result> FetchPopUp(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchPopUp_Result>("FetchPopUp", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<FetchAllCoupons_Result> FetchAllCoupons(Nullable<int> displayLength, Nullable<int> displayStart, Nullable<int> sortCol, string sortOrder, string search, Nullable<System.Guid> applicationID)
        {
            var displayLengthParameter = displayLength.HasValue ?
                new ObjectParameter("DisplayLength", displayLength) :
                new ObjectParameter("DisplayLength", typeof(int));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("DisplayStart", displayStart) :
                new ObjectParameter("DisplayStart", typeof(int));
    
            var sortColParameter = sortCol.HasValue ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(int));
    
            var sortOrderParameter = sortOrder != null ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(string));
    
            var searchParameter = search != null ?
                new ObjectParameter("Search", search) :
                new ObjectParameter("Search", typeof(string));
    
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchAllCoupons_Result>("FetchAllCoupons", displayLengthParameter, displayStartParameter, sortColParameter, sortOrderParameter, searchParameter, applicationIDParameter);
        }
    
        public virtual ObjectResult<spGetDriverVehicleDetail_Result> spGetDriverVehicleDetail(string driverID, string vehicleID, string userID, Nullable<bool> ishotel)
        {
            var driverIDParameter = driverID != null ?
                new ObjectParameter("driverID", driverID) :
                new ObjectParameter("driverID", typeof(string));
    
            var vehicleIDParameter = vehicleID != null ?
                new ObjectParameter("vehicleID", vehicleID) :
                new ObjectParameter("vehicleID", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var ishotelParameter = ishotel.HasValue ?
                new ObjectParameter("ishotel", ishotel) :
                new ObjectParameter("ishotel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDriverVehicleDetail_Result>("spGetDriverVehicleDetail", driverIDParameter, vehicleIDParameter, userIDParameter, ishotelParameter);
        }
    
        public virtual ObjectResult<spCaptainCancelRide_Result> spCaptainCancelRide(string tripID, string driverID, Nullable<int> tripStatusID, Nullable<int> cancelID, Nullable<bool> isWeb, Nullable<bool> isAtPickupLocation, Nullable<System.DateTime> rideCancelDateTime)
        {
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            var driverIDParameter = driverID != null ?
                new ObjectParameter("driverID", driverID) :
                new ObjectParameter("driverID", typeof(string));
    
            var tripStatusIDParameter = tripStatusID.HasValue ?
                new ObjectParameter("tripStatusID", tripStatusID) :
                new ObjectParameter("tripStatusID", typeof(int));
    
            var cancelIDParameter = cancelID.HasValue ?
                new ObjectParameter("cancelID", cancelID) :
                new ObjectParameter("cancelID", typeof(int));
    
            var isWebParameter = isWeb.HasValue ?
                new ObjectParameter("isWeb", isWeb) :
                new ObjectParameter("isWeb", typeof(bool));
    
            var isAtPickupLocationParameter = isAtPickupLocation.HasValue ?
                new ObjectParameter("isAtPickupLocation", isAtPickupLocation) :
                new ObjectParameter("isAtPickupLocation", typeof(bool));
    
            var rideCancelDateTimeParameter = rideCancelDateTime.HasValue ?
                new ObjectParameter("rideCancelDateTime", rideCancelDateTime) :
                new ObjectParameter("rideCancelDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCaptainCancelRide_Result>("spCaptainCancelRide", tripIDParameter, driverIDParameter, tripStatusIDParameter, cancelIDParameter, isWebParameter, isAtPickupLocationParameter, rideCancelDateTimeParameter);
        }
    
        public virtual ObjectResult<spGetUserPromos_Result> spGetUserPromos(Nullable<System.Guid> passengerId, Nullable<bool> active)
        {
            var passengerIdParameter = passengerId.HasValue ?
                new ObjectParameter("passengerId", passengerId) :
                new ObjectParameter("passengerId", typeof(System.Guid));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserPromos_Result>("spGetUserPromos", passengerIdParameter, activeParameter);
        }
    
        public virtual ObjectResult<spGetTripDetails_Result> spGetTripDetails(Nullable<System.Guid> tripID)
        {
            var tripIDParameter = tripID.HasValue ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTripDetails_Result>("spGetTripDetails", tripIDParameter);
        }
    
        public virtual ObjectResult<spAfterMobilePayment_Result> spAfterMobilePayment(string tripID, string transactionID, Nullable<int> tripStatusID, string pID, string applicationID, string amount, Nullable<System.DateTime> trnsDate, Nullable<int> paymentStatusID)
        {
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("transactionID", transactionID) :
                new ObjectParameter("transactionID", typeof(string));
    
            var tripStatusIDParameter = tripStatusID.HasValue ?
                new ObjectParameter("tripStatusID", tripStatusID) :
                new ObjectParameter("tripStatusID", typeof(int));
    
            var pIDParameter = pID != null ?
                new ObjectParameter("pID", pID) :
                new ObjectParameter("pID", typeof(string));
    
            var applicationIDParameter = applicationID != null ?
                new ObjectParameter("applicationID", applicationID) :
                new ObjectParameter("applicationID", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(string));
    
            var trnsDateParameter = trnsDate.HasValue ?
                new ObjectParameter("trnsDate", trnsDate) :
                new ObjectParameter("trnsDate", typeof(System.DateTime));
    
            var paymentStatusIDParameter = paymentStatusID.HasValue ?
                new ObjectParameter("paymentStatusID", paymentStatusID) :
                new ObjectParameter("paymentStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAfterMobilePayment_Result>("spAfterMobilePayment", tripIDParameter, transactionIDParameter, tripStatusIDParameter, pIDParameter, applicationIDParameter, amountParameter, trnsDateParameter, paymentStatusIDParameter);
        }
    
        public virtual ObjectResult<spGetUpdateTripDataOnAcceptRide_Result> spGetUpdateTripDataOnAcceptRide(string tripID, string driverID, Nullable<int> tripStatusID, string vehicleID, Nullable<int> isLaterBooking, string fleetID, Nullable<System.DateTime> pickUpDateTime)
        {
            var tripIDParameter = tripID != null ?
                new ObjectParameter("tripID", tripID) :
                new ObjectParameter("tripID", typeof(string));
    
            var driverIDParameter = driverID != null ?
                new ObjectParameter("driverID", driverID) :
                new ObjectParameter("driverID", typeof(string));
    
            var tripStatusIDParameter = tripStatusID.HasValue ?
                new ObjectParameter("tripStatusID", tripStatusID) :
                new ObjectParameter("tripStatusID", typeof(int));
    
            var vehicleIDParameter = vehicleID != null ?
                new ObjectParameter("vehicleID", vehicleID) :
                new ObjectParameter("vehicleID", typeof(string));
    
            var isLaterBookingParameter = isLaterBooking.HasValue ?
                new ObjectParameter("isLaterBooking", isLaterBooking) :
                new ObjectParameter("isLaterBooking", typeof(int));
    
            var fleetIDParameter = fleetID != null ?
                new ObjectParameter("fleetID", fleetID) :
                new ObjectParameter("fleetID", typeof(string));
    
            var pickUpDateTimeParameter = pickUpDateTime.HasValue ?
                new ObjectParameter("pickUpDateTime", pickUpDateTime) :
                new ObjectParameter("pickUpDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUpdateTripDataOnAcceptRide_Result>("spGetUpdateTripDataOnAcceptRide", tripIDParameter, driverIDParameter, tripStatusIDParameter, vehicleIDParameter, isLaterBookingParameter, fleetIDParameter, pickUpDateTimeParameter);
        }
    }
}
